<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cy个人博客</title>
  
  <subtitle>I am Yang , and I am young !</subtitle>
  <link href="https://www.cyixlq.top/atom.xml" rel="self"/>
  
  <link href="https://www.cyixlq.top/"/>
  <updated>2021-04-12T08:13:12.474Z</updated>
  <id>https://www.cyixlq.top/</id>
  
  <author>
    <name>Cy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>livedata-bus</title>
    <link href="https://www.cyixlq.top/2021/04/13/livedata-bus/"/>
    <id>https://www.cyixlq.top/2021/04/13/livedata-bus/</id>
    <published>2021-04-12T16:05:56.000Z</published>
    <updated>2021-04-12T08:13:12.474Z</updated>
    
    <content type="html"><![CDATA[<p>LiveDataBus已经是一个老生常谈的话题了，但是我们今天搞点不一样(噱)的(头)。废话不多说，先上地址：<a href="https://github.com/cyixlq/LiveEventBus">https://github.com/cyixlq/LiveEventBus</a></p><p>先来说一说LiveDataBus的一些老生常谈的优势：</p><ul><li>不需要像EventBus那样注册反注册，可以自动注册解注册，避免了忘记反注册导致内存泄漏</li><li>事件发送不是通过反射执行，但现在EventBus通过APT也可以实现</li><li>其它，还有吗？我暂时没想到</li></ul><span id="more"></span><p>接着，我们看一看将LiveData打造成一款事件总线类型的框架首先要克服的一些问题：</p><ul><li>在组件从非活跃状态变成活跃状态时，会将observe之前的value发送过来。（这个问题怎么说呢，你说它是问题，但是有的业务场景确实需要(sticky模式，但是并不需要每次从onStop之后恢复过来都发送一次)，你说他不是问题，但是大部分场景我们确实只需要在订阅事件之后的数据。</li><li>LiveData数据丢失的问题。LiveData怎么判断一个组件是否在活跃状态？可以通过代码<code>mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED)</code>知道，至少是STARTED状态的才是活跃状态。那么执行过哪些生命周期回调才算是STARTED状态呢？我们通过查看LifecycleRegistry类的getStateAfter方法可以知道，在onStart和onPause之间均是STARTED状态（这里为了我的排版我就不贴代码了，感兴趣的可以去自行查看）。因此，组件在onCreate/onStop的时候是收不到数据的，更不用说onDestroy。😁但是其实这也不算问题，因为LiveData认为看不到界面的时候更新界面是毫无意义的，并且LiveData本身就不是设计用来传送事件的，而是用来更新UI的，你要强行把它打造成事件总线框架那<code>谷歌</code>能有什么办法。<code>谷歌内心OS：你们这不是强人锁男吗？</code>。另外postValue的时候通过阅读代码逻辑可以发现(如果你不想读，那么你可以直接看postValue的注释文档)，如果你在短时间内多次postValue，那么最终只有最新的value才能发送出去。</li><li>LiveData的粘性事件有点不合逻辑。其实这也不算…（打住，别说了，我知道了，这也不算问题）</li></ul><p>接着我们来看一看以往我们为了将LiveData打造成一款简易LiveDataBus是怎么将这些问题克服的，上个链接，先看看简易版LiveDataBus<a href="https://tech.meituan.com/2018/07/26/android-livedatabus.html">点我前往</a>：</p><ul><li>在observe LiveData的时候反射修改对应ObserverWrapper中mLastVersion的值，让它和LiveData中的mVersion保持一致，这样在生命周期状态发生改变分发value的时候，不会因为订阅时的版本小于LiveData中的版本而被认为其数据需要更新。（那有的同学就会说了：啊啊啊~，那你用了反射会不会影响我做的响应时间要6，7s的APP的运行速度啊，毕竟大家都说反射性能都很低的！| 别急，我们接着往下看）</li><li>其它问题的解决与拓展相应实现起来就有点棘手，因为我们无法修改LiveData的源码，所以才有了我们今天的文章。我反手就是抄代码，一个Ctrl + c和一个Ctrl + v。谷歌，你的代码就是我的了！嘿嘿，想不到吧！</li></ul><p>好了，现在是开始我们大展(抄)身(代)手(码)的时候了。LiveData其实最关键的就两个类，这更给了我们大展(抄)身(代)手(码)一个好机会。这两个类分别是：LiveData和SafeIterableMap。</p><p>抄LiveData无可厚非，可是这个SafeIterableMap是个什么东西？这个是谷歌团队使用链表的数据结构仿的一个Map，可以在遍历的时候安全地移除删除元素，这个LiveData所有的订阅者都是存在这个里面。有感兴趣的小伙伴可以<a href="https://blog.csdn.net/c6E5UlI1N/article/details/79608996">点我</a>前往查看它的一个原理实现解析。</p><p>那又有同学要问了，为啥这个我还要抄呢？我一个import不行吗？也不是不行，但是这个类添加了一个<code>@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP_PREFIX)</code>的注解，这个注解啥意思<a href="https://developer.android.google.cn/reference/androidx/annotation/RestrictTo.Scope?hl=en">点我前往查看</a>。大意就是限制这个类只能在包名前缀相同的类中使用。如果你想强制使用也可以，直接import使用虽然会代码飘红，但是能编译通过，强迫症受不了还可以在对应的成员变量上或者方法上加上这个注解<code>@SuppressLint(&quot;RestrictedApi&quot;)</code>。但是这样做不累吗？我一个Ctrl+c和一个Ctrl+v然后修改一下把这个限制解除不香吗？另外指不定谷歌日后会对这个注解进行一些其他限制，比如直接崩溃来限制调用，又比如无法通过编译。</p><p>至此，我们可以开始定制我们的LiveDataBus，但是为了把谷歌的这个东西彻底变成我们的，索性我们名字也改一个，LiveData改成LiveEvent，打造的事件Bus我们就叫LiveEventBus。<code>ps:确实也不该叫LiveData了，因为我们定制化不少了</code></p><ol><li>首先将SafeIterableMap的源码拷贝到项目中，去除<code>@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP_PREFIX)</code>，不去也可以，因为LiveEvent类到时候和这个类包名前缀肯定是一样的，但是为了方便对外使用，去掉不香吗？</li><li>将LiveData源码拷贝到项目中，并且更名为LiveEvent，修改构造方法名。发现还有ArchTaskExecutor和GenericLifecycleObserver两个类同样加了限制注解，没关系，将相应代码直接改成这个类中对应的代码： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.源代码</span><br><span class="line">   class LifecycleBoundObserver extends ObserverWrapper implements GenericLifecycleObserver</span><br><span class="line">   &#x2F;&#x2F; 1.发现GenericLifecycleObserver中啥也没有，直接继承的LifecycleEventObserver，那我们直接改就好了</span><br><span class="line">   class LifecycleBoundObserver extends ObserverWrapper implements LifecycleEventObserver</span><br><span class="line">   </span><br><span class="line">   &#x2F;&#x2F; 2.源代码</span><br><span class="line">   if (!ArchTaskExecutor.getInstance().isMainThread()) </span><br><span class="line">   &#x2F;&#x2F; 2.直接看对应方法源码，发现由DefaultTaskExecutor类实现，直接用其实现进行替换</span><br><span class="line">   if (Looper.getMainLooper().getThread() !&#x3D; Thread.currentThread())</span><br></pre></td></tr></table></figure></li><li>改造postValue方法，解决同一时间多次postValue只会发送最新的值，同时将修饰改成public。通过源码发现postValue通过Handler将任务post到主线程最终调用setValue，我们改造就是每一次执行postValue就判断当前调用线程是不是主线程，是主线程就可以直接调用setValue，否则使用Handler post到主线程执行setValue。同时去除没用的变量：<code>mDataLock</code>，<code>mPendingData</code>，<code>mPostValueRunnable</code>。再添加一个成员变量Handler，用于切换到主线程。为了将改(盗)造(版)进行到底，同时为了更符合语义，我们可以将postValue方法改名为postEvent： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 用于切换到主线程的Handler</span><br><span class="line">private final Handler mHandler &#x3D; new Handler(Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line">public void postEvent(T value) &#123;</span><br><span class="line">    &#x2F;&#x2F; 如果在主线程</span><br><span class="line">    if (Looper.getMainLooper().getThread() &#x3D;&#x3D; Thread.currentThread())</span><br><span class="line">        setValue(value);</span><br><span class="line">    else</span><br><span class="line">        mHandler.post(() -&gt; setValue(value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>改造setValue方法，解决setValue只在onStart和onPause生命周期之间才能接收到value的问题。只需将上文提到的约束扩大到CREATED范围就行（onCreate和onStop之间），改成这个范围之后也能顺带解决Activity在onStop之后恢复又会重新发送一次事件的问题。修改LifecycleBoundObserver类中shouldBeActive方法，代码如下。同时外部其实用不到setValue方法，都可以直接通过postEvent来间接调用，所以可以修饰成private。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">boolean shouldBeActive() &#123;</span><br><span class="line">    return mOwner.getLifecycle().getCurrentState().isAtLeast(CREATED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>为了解决组件从非活跃状态切换到活跃状态会将observe之前的value发送过来，同时又为了拓展需要这种需求的情况，那我们直接打造一个可以控制是否需要sticky的模式吧。我们在ObserverWrapper中添加isStickyMode成员变量，同时为其添加构造方法，代码如下： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">final boolean isStickyMode;</span><br><span class="line"></span><br><span class="line">ObserverWrapper(Observer&lt;? super T&gt; observer, final boolean isStickyMode) &#123;</span><br><span class="line">    mObserver &#x3D; observer;</span><br><span class="line">    this.isStickyMode &#x3D; isStickyMode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 其它调用了ObserverWrapper构造方法的地方进行同理改造</span><br><span class="line">AlwaysActiveObserver(Observer&lt;? super T&gt; observer, boolean isStickyMode) &#123;</span><br><span class="line">    super(observer, isStickyMode);</span><br><span class="line">&#125;</span><br><span class="line">LifecycleBoundObserver(@NonNull LifecycleOwner owner, Observer&lt;? super T&gt; observer, boolean isStickyMode) &#123;</span><br><span class="line">    super(observer, isStickyMode);</span><br><span class="line">    mOwner &#x3D; owner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 另外还需要添加一个observeSticky方法代表在以sticky模式观察，observe方法也需要改造，代表不以sticky模式观察。observeForever同理也进行改造。代码如下： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">@MainThread</span><br><span class="line">public void observe(@NonNull LifecycleOwner owner, @NonNull Observer&lt;? super T&gt; observer) &#123;</span><br><span class="line">    assertMainThread(&quot;observe&quot;);</span><br><span class="line">    realObserve(owner, observer, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@MainThread</span><br><span class="line">public void observeSticky(@NonNull LifecycleOwner owner, @NonNull Observer&lt;? super T&gt; observer) &#123;</span><br><span class="line">    assertMainThread(&quot;observeSticky&quot;);</span><br><span class="line">    realObserve(owner, observer, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@MainThread</span><br><span class="line">private void realObserve(@NonNull LifecycleOwner owner, @NonNull Observer&lt;? super T&gt; observer, boolean isStickyMode) &#123;</span><br><span class="line">    if (owner.getLifecycle().getCurrentState() &#x3D;&#x3D; DESTROYED) &#123;</span><br><span class="line">        &#x2F;&#x2F; ignore</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    LifecycleBoundObserver wrapper &#x3D; new LifecycleBoundObserver(owner, observer, isStickyMode);</span><br><span class="line">    ObserverWrapper existing &#x3D; mObservers.putIfAbsent(observer, wrapper);</span><br><span class="line">    if (existing !&#x3D; null &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Cannot add the same observer&quot;</span><br><span class="line">                + &quot; with different lifecycles&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (existing !&#x3D; null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    owner.getLifecycle().addObserver(wrapper);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> @MainThread</span><br><span class="line">public void observeForever(@NonNull Observer&lt;? super T&gt; observer) &#123;</span><br><span class="line">    assertMainThread(&quot;observeForever&quot;);</span><br><span class="line">    realObserveForever(observer, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@MainThread</span><br><span class="line">public void observeForeverSticky(@NonNull Observer&lt;? super T&gt; observer) &#123;</span><br><span class="line">    assertMainThread(&quot;observeForeverSticky&quot;);</span><br><span class="line">    realObserveForever(observer, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@MainThread</span><br><span class="line">private void realObserveForever(@NonNull Observer&lt;? super T&gt; observer, boolean isStickyMode) &#123;</span><br><span class="line">    AlwaysActiveObserver wrapper &#x3D; new AlwaysActiveObserver(observer, isStickyMode);</span><br><span class="line">    ObserverWrapper existing &#x3D; mObservers.putIfAbsent(observer, wrapper);</span><br><span class="line">    if (existing !&#x3D; null &amp;&amp; existing instanceof LiveEvent.LifecycleBoundObserver) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Cannot add the same observer&quot;</span><br><span class="line">                + &quot; with different lifecycles&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (existing !&#x3D; null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    wrapper.activeStateChanged(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>有了isStickyMode这个变量之后，version的对比显得就不必要了，之前LiveData原有逻辑是组件从非活跃变为活跃状态就会调用dispatchingValue方法，而dispatchingValue方法又会调用considerNotify方法，considerNotify方法中对比Observer和LiveData中的版本，如果Observer中的mLastVersion小于LiveData中的mVersion说明Observer没有接收到最新的数据，那么便进行一次分发。现在我们有了isStickyMode变量控制，加上活跃状态的范围提升到onCreate到onStop之间(这个范围之外的生命周期只剩onDestroy，但是到了这个状态LiveData会自动将这个Observer给移除)，版本的对比就起不了什么作用，可以将相关变量与方法精简掉(还能防止发送事件次数过多，mVersion超过了int所能容纳的最大值导致的异常，虽然你的App也不可能有发送了20多亿次事件用户还没把你App关掉的情况)。considerNotify方法中通过判断版本是否忽略分发的代码逻辑可以改成value是否被赋值过来判断是否忽略分发，代码如下： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (mData &#x3D;&#x3D; NOT_SET) &#123;</span><br><span class="line">    &#x2F;&#x2F; 从没发送过事件直接忽视分发事件</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>最后我们编写一个工具类，将使用方法封装起来： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class LiveEventBus &#123;</span><br><span class="line"></span><br><span class="line">    private static final class SingleHolder &#123;</span><br><span class="line">        private static final LiveEventBus INSTANCE &#x3D; new LiveEventBus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static LiveEventBus get() &#123;</span><br><span class="line">        return SingleHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private final ConcurrentHashMap&lt;Object, LiveEvent&lt;Object&gt;&gt; mEventMap;</span><br><span class="line"></span><br><span class="line">    private LiveEventBus() &#123;</span><br><span class="line">        mEventMap &#x3D; new ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; LiveEvent&lt;T&gt; with(@NonNull final String key, @NonNull final Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        return realWith(key, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; LiveEvent&lt;T&gt; with(@NonNull final Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        return realWith(null, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    private &lt;T&gt; LiveEvent&lt;T&gt; realWith(final String key, final Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        final Object objectKey;</span><br><span class="line">        if (key !&#x3D; null) &#123;</span><br><span class="line">            objectKey &#x3D; key;</span><br><span class="line">        &#125; else if (clazz !&#x3D; null) &#123;</span><br><span class="line">            objectKey &#x3D; clazz;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;key and clazz, one of which must not be null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        LiveEvent&lt;Object&gt; result &#x3D; mEventMap.get(objectKey);</span><br><span class="line">        if (result !&#x3D; null) return (LiveEvent&lt;T&gt;) result;</span><br><span class="line">        synchronized (mEventMap) &#123;</span><br><span class="line">            result &#x3D; mEventMap.get(objectKey);</span><br><span class="line">            if (result &#x3D;&#x3D; null) &#123;</span><br><span class="line">                result &#x3D; new LiveEvent&lt;&gt;();</span><br><span class="line">                mEventMap.put(objectKey, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return (LiveEvent&lt;T&gt;) result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>最后，我们就用这几百行代码打造了一款非常牛(噱)逼(头)的事件总线框架，没有反射，不会影响你响应时间需要6，7s的APP的运行速度。你甚至还可以删除LiveEvent一些不需要的对外方法以及不再使用到的成员变量。为了进一步压缩代码行数，你甚至可以把注释也给删除了！我就这么干了，最后的LiveEvent只有两百多行代码。</p><p>当然，这还没完，我们还可以进一步优化一下，比如我们每次创建LiveEvent对象就会有一个Handler也被随之创建，我们完全可以共用一个Handler来将任务post到主线程，然后还有线程的判断这些方法我们也可以提取到一个公共类中，那么这个类我们不如叫它DefaultTaskExecutor吧！咦，这么巧，androidx包里面就有这个诶，那我们直接把它复制过来当工具类用吧。后面还有一个继承的父类也有限制注解？算了，不要它也不是不能用，那直接去了吧。多余的override注解也给去了，里面还有个用于切换到io线程的方法，emmm留着吧，万一以后要呢，只是线程名给它改一个我们自己想定义的名字(将盗版进行到底)…为了使用方便，把它改成单例吧，再把LiveEvent类中可以用到这个类方法的地方替换一下，完美收官！</p><p>最后讲讲LiveEventBus用法，那是相当简单，参照<a href="https://github.com/cyixlq/LiveEventBus/blob/main/app/src/main/java/top/cyixlq/sample/MainActivity.kt">MainActivity</a>和<a href="https://github.com/cyixlq/LiveEventBus/blob/main/app/src/main/java/top/cyixlq/sample/SecondActivity.kt">SecondActivity</a></p><p>声明：本文可能会随着项目代码的改动而导致更新不及时，请以项目中代码为准！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;LiveDataBus已经是一个老生常谈的话题了，但是我们今天搞点不一样(噱)的(头)。废话不多说，先上地址：&lt;a href=&quot;https://github.com/cyixlq/LiveEventBus&quot;&gt;https://github.com/cyixlq/LiveEventBus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先来说一说LiveDataBus的一些老生常谈的优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要像EventBus那样注册反注册，可以自动注册解注册，避免了忘记反注册导致内存泄漏&lt;/li&gt;
&lt;li&gt;事件发送不是通过反射执行，但现在EventBus通过APT也可以实现&lt;/li&gt;
&lt;li&gt;其它，还有吗？我暂时没想到&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.cyixlq.top/categories/Android/"/>
    
    
    <category term="livedata_bus" scheme="https://www.cyixlq.top/tags/livedata-bus/"/>
    
    <category term="jetpack" scheme="https://www.cyixlq.top/tags/jetpack/"/>
    
    <category term="livedata" scheme="https://www.cyixlq.top/tags/livedata/"/>
    
  </entry>
  
  <entry>
    <title>自定义一个仿拼多多地址选择器</title>
    <link href="https://www.cyixlq.top/2019/04/19/custom-address-picker-like-pinduoduo/"/>
    <id>https://www.cyixlq.top/2019/04/19/custom-address-picker-like-pinduoduo/</id>
    <published>2019-04-19T10:56:23.000Z</published>
    <updated>2021-04-12T02:21:41.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公司正在开发一个商城项目，因为项目需要，做了一个仿拼多多的地址选择器，但是与拼多多实现方法有些出入，大体效果是差不多的。<br>（2019年04月22日更新）最后决定还是单独提取出来做个demo给大家参考参考，地址：<a href="https://github.com/cyixlq/AddressPickerDialog">https://github.com/cyixlq/AddressPickerDialog</a><br>废话不多说，先上一张效果动图：<br><img src="/images/%E5%9C%B0%E5%9D%80%E9%80%89%E6%8B%A9%E5%99%A8%E6%95%88%E6%9E%9C%E5%9B%BE.gif" alt="地址选择器效果图.gif"></p><span id="more"></span><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol><li>先说说本文的一些概念。地区级别：就是比如省级，市级，县级，镇级，那么这种最多就是4级。</li><li>好了，我们分析一波效果图，当一个级别的地区选择好之后会创建出一个新的Tab，到了最后一个地区级别之后就不会再创建新的。如果倒回去重新选择一个级别的地区，会移除后面的Tab之后再创建一个新的Tab。选择好之后，如果点击Tab会切换到相应地区级别，并且滚动到之前选择的地区显示，创建新的Tab就默认滚动到第一个position的位置。</li><li>其次，来看看我们这个界面的布局：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;560dp&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;</span><br><span class="line">    android:paddingStart&#x3D;&quot;12dp&quot;</span><br><span class="line">    android:paddingEnd&#x3D;&quot;12dp&quot;&gt;</span><br><span class="line">    &lt;!-- Dialog的标题 --&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;user_tv_dialog_title&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginTop&#x3D;&quot;18dp&quot;</span><br><span class="line">        android:layout_gravity&#x3D;&quot;center_horizontal&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!-- 标题下的第一条横线 --&gt;</span><br><span class="line">    &lt;View</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;1dp&quot;</span><br><span class="line">        android:background&#x3D;&quot;#e6e6e6&quot;</span><br><span class="line">        android:layout_marginTop&#x3D;&quot;17dp&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!-- 顶部的TabLayout --&gt;</span><br><span class="line">    &lt;android.support.design.widget.TabLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;user_tb_dialog_tab&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        app:tabSelectedTextColor&#x3D;&quot;@color&#x2F;colorPrimary&quot;</span><br><span class="line">        app:tabGravity&#x3D;&quot;fill&quot;</span><br><span class="line">        app:tabMode&#x3D;&quot;scrollable&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!-- TabLayout下方的横线 --&gt;</span><br><span class="line">    &lt;View</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;1dp&quot;</span><br><span class="line">        android:background&#x3D;&quot;#e6e6e6&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!-- 显示地区数据的RecyclerView --&gt;</span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;user_rv_dialog_list&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;0dp&quot;</span><br><span class="line">        android:layout_weight&#x3D;&quot;1&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure></li><li>从布局中我们可以看出，我最主要靠TabLayout加RecyclerView实现这个效果，而拼多多个人猜测是TabLayout加RecyclerView加ViewPager，所以拼多多的RecyclerView是可以侧滑到上一个Tab页或下一个，这也就是和拼多多效果的不同之处。<h3 id="开始撸代码"><a href="#开始撸代码" class="headerlink" title="开始撸代码"></a>开始撸代码</h3></li><li>从代码下手，首先把单个地区列表的布局写好：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout</span><br><span class="line">    xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;horizontal&quot;</span><br><span class="line">    android:paddingTop&#x3D;&quot;10dp&quot;</span><br><span class="line">    android:paddingBottom&#x3D;&quot;10dp&quot;</span><br><span class="line">    tools:ignore&#x3D;&quot;UseCompoundDrawables&quot;&gt;</span><br><span class="line">    &lt;!-- 显示地区名称 --&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;user_tv_address_dialog&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!-- 显示后面的勾选图标 --&gt;</span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;user_iv_address_dialog&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;13dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;9dp&quot;</span><br><span class="line">        android:src&#x3D;&quot;@drawable&#x2F;user_icon_address_check&quot;</span><br><span class="line">        android:layout_marginStart&#x3D;&quot;11dp&quot;</span><br><span class="line">        android:layout_gravity&#x3D;&quot;center_vertical&quot;</span><br><span class="line">        android:visibility&#x3D;&quot;gone&quot;</span><br><span class="line">        tools:ignore&#x3D;&quot;ContentDescription&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure></li><li>把地区这个实体对象创建好：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class AddressItem &#123;</span><br><span class="line">    &#x2F;&#x2F; 地区名</span><br><span class="line">    private String address;</span><br><span class="line">    &#x2F;&#x2F; 是否勾选</span><br><span class="line">    private boolean isChecked;</span><br><span class="line">    &#x2F;&#x2F; 地区的ID，我这边项目需要的是int型，大家可以根据自己项目需要进行修改</span><br><span class="line">    private int id;</span><br><span class="line"></span><br><span class="line">    public String getAddress() &#123;</span><br><span class="line">        return this.address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        this.address &#x3D; address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isChecked() &#123;</span><br><span class="line">        return this.isChecked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setChecked(boolean checked) &#123;</span><br><span class="line">        this.isChecked &#x3D; checked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return this.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;AddressItem&#123;&quot; +</span><br><span class="line">                &quot;address&#x3D;&#39;&quot; + address + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, isChecked&#x3D;&quot; + isChecked +</span><br><span class="line">                &quot;, id&#x3D;&quot; + id +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>把RecyclerView的适配器写好：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">public class AddressAdapter extends RecyclerView.Adapter&lt;AddressAdapter.MyViewHolder&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 保存地区数据的列表</span><br><span class="line">    private List&lt;AddressItem&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    &#x2F;&#x2F; 自定义的单项被点击监听事件</span><br><span class="line">    private ItemClickListener listener;</span><br><span class="line"></span><br><span class="line">    @NonNull</span><br><span class="line">    @Override</span><br><span class="line">    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) &#123;</span><br><span class="line">        View view &#x3D; LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.user_item_address_bottom_sheet_dialog, viewGroup, false);</span><br><span class="line">        return new MyViewHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onBindViewHolder(@NonNull MyViewHolder myViewHolder, int i) &#123;</span><br><span class="line">        AddressItem item &#x3D; list.get(i);</span><br><span class="line">        if (item.isChecked()) &#123;</span><br><span class="line">            myViewHolder.tvAddress.setText(item.getAddress());</span><br><span class="line">            myViewHolder.tvAddress.setTextColor(Color.parseColor(&quot;#1F83FF&quot;));</span><br><span class="line">            myViewHolder.ivChecked.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            myViewHolder.tvAddress.setText(item.getAddress());</span><br><span class="line">            myViewHolder.tvAddress.setTextColor(Color.BLACK);</span><br><span class="line">            myViewHolder.ivChecked.setVisibility(View.GONE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        return this.list &#x3D;&#x3D; null ? 0 : list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setList(List&lt;AddressItem&gt; list) &#123;</span><br><span class="line">        if (this.list !&#x3D; null &amp;&amp; list !&#x3D; null) &#123;</span><br><span class="line">            this.list.clear();</span><br><span class="line">            this.list.addAll(list);</span><br><span class="line">            this.notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOnItemClickListener(@NonNull ItemClickListener listener) &#123;</span><br><span class="line">        this.listener &#x3D; listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class MyViewHolder extends RecyclerView.ViewHolder &#123;</span><br><span class="line">        TextView tvAddress;</span><br><span class="line">        ImageView ivChecked;</span><br><span class="line">        MyViewHolder(@NonNull View itemView) &#123;</span><br><span class="line">            super(itemView);</span><br><span class="line">            tvAddress &#x3D; itemView.findViewById(R.id.user_tv_address_dialog);</span><br><span class="line">            ivChecked &#x3D; itemView.findViewById(R.id.user_iv_address_dialog);</span><br><span class="line">            if (listener !&#x3D; null) &#123;</span><br><span class="line">                itemView.setOnClickListener(v -&gt; listener.onItemClick(getAdapterPosition()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface ItemClickListener &#123;</span><br><span class="line">        void onItemClick(int position);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>首先自己动手写了两个BaseDialog，没什么营养，代码也很简单：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public abstract class CustomBaseDialog extends Dialog &#123;</span><br><span class="line"></span><br><span class="line">    protected Context context;</span><br><span class="line"></span><br><span class="line">    public CustomBaseDialog(@NonNull Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">        this.context &#x3D; context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract Integer getLayout();</span><br><span class="line">    protected abstract Integer getGravity();</span><br><span class="line">    protected abstract Integer getBackgroundRes();</span><br><span class="line">    protected abstract Integer getWindowAnimations();</span><br><span class="line">    protected abstract void initView();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        if (getLayout() !&#x3D; null)</span><br><span class="line">            setContentView(getLayout());</span><br><span class="line">        Window window &#x3D; getWindow();</span><br><span class="line">        if (window !&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F; 去除DecorView默认的内边距，好让布局占满整个横向屏幕</span><br><span class="line">            View decorView &#x3D; window.getDecorView();</span><br><span class="line">            decorView.setPadding(0,0,0,0);</span><br><span class="line">            if (getGravity() !&#x3D; null)</span><br><span class="line">                window.setGravity(getGravity());</span><br><span class="line">            else</span><br><span class="line">                window.setGravity(Gravity.CENTER);</span><br><span class="line">            if (getWindowAnimations() !&#x3D; null)</span><br><span class="line">                window.setWindowAnimations(getWindowAnimations());</span><br><span class="line">            if (getBackgroundRes() !&#x3D; null)</span><br><span class="line">                decorView.setBackgroundResource(getBackgroundRes());</span><br><span class="line">        &#125;</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void setClickListener(int id, View.OnClickListener listener) &#123;</span><br><span class="line">        findViewById(id).setOnClickListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public abstract class CustomBaseBottomSheetDialog extends CustomBaseDialog &#123;</span><br><span class="line">    public CustomBaseBottomSheetDialog(@NonNull Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Integer getGravity() &#123;</span><br><span class="line">        return Gravity.BOTTOM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        Window window &#x3D; getWindow();</span><br><span class="line">        if (null !&#x3D; window) &#123;</span><br><span class="line">            &#x2F;&#x2F; 去除window的margin，目的也是为了让布局占满屏幕</span><br><span class="line">            WindowManager.LayoutParams layoutParams &#x3D; window.getAttributes();</span><br><span class="line">            layoutParams.width &#x3D; WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">            layoutParams.horizontalMargin &#x3D; 0;</span><br><span class="line">            window.setAttributes(layoutParams);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>接着才是重点，自定义地址选择器Dialog：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">public class AddressBottomSheetDialog extends CustomBaseBottomSheetDialog &#123;</span><br><span class="line"></span><br><span class="line">    private TabLayout tabLayout;</span><br><span class="line">    private AddressAdapter addressAdapter;</span><br><span class="line"></span><br><span class="line">    private int maxLevel;   &#x2F;&#x2F; 最大有多少级的地区，可以通过setMaxLevel方法进行自定义</span><br><span class="line">    private SparseArray&lt;List&lt;AddressItem&gt;&gt; levelList;     &#x2F;&#x2F; 级别列表数据</span><br><span class="line">    private SparseIntArray levelPosition;                 &#x2F;&#x2F; 各个级别选中的列表position</span><br><span class="line">    private SparseIntArray levelIds;                      &#x2F;&#x2F; 各个级别选择的地址ID</span><br><span class="line">    private String title;  &#x2F;&#x2F; 标题</span><br><span class="line">    private String tabText &#x3D; &quot;请选择&quot;;                    &#x2F;&#x2F; 新的Tab默认显示的文本</span><br><span class="line">    private TabSelectChangeListener changeListener;       &#x2F;&#x2F; Tab的选择被改变的监听</span><br><span class="line"></span><br><span class="line">    public AddressBottomSheetDialog(@NonNull Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Integer getLayout() &#123;</span><br><span class="line">        return R.layout.user_layout_address_bottom_sheet_dialog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Integer getBackgroundRes() &#123;</span><br><span class="line">        return R.drawable.bg_dialog_bottom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Integer getWindowAnimations() &#123;</span><br><span class="line">        return R.style.DialogBottom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void initView() &#123;</span><br><span class="line">        levelList &#x3D; new SparseArray&lt;&gt;();</span><br><span class="line">        levelPosition &#x3D; new SparseIntArray();</span><br><span class="line">        levelIds &#x3D; new SparseIntArray();</span><br><span class="line"></span><br><span class="line">        ((TextView)findViewById(R.id.user_tv_dialog_title)).setText(title);</span><br><span class="line">        tabLayout &#x3D; findViewById(R.id.user_tb_dialog_tab);</span><br><span class="line">        final RecyclerView recyclerView &#x3D; findViewById(R.id.user_rv_dialog_list);</span><br><span class="line"></span><br><span class="line">        tabLayout.addOnTabSelectedListener(new TabLayout.BaseOnTabSelectedListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onTabSelected(TabLayout.Tab tab) &#123;</span><br><span class="line">                final int position &#x3D; tab.getPosition();</span><br><span class="line">                List&lt;AddressItem&gt; list &#x3D; levelList.get(position);</span><br><span class="line">                if (null !&#x3D; list &amp;&amp; !list.isEmpty()) &#123;   &#x2F;&#x2F; 如果选中级别的List没有数据就通过执行回调来获取，否则直接复用</span><br><span class="line">                    addressAdapter.setList(list);</span><br><span class="line">                    final int lastClickPositon &#x3D; levelPosition.get(position, -1); &#x2F;&#x2F; 获取上一次选中的地区的position，如果找不到，默认返回-1</span><br><span class="line">                    if (lastClickPositon &gt;&#x3D; 0) recyclerView.smoothScrollToPosition(lastClickPositon); &#x2F;&#x2F; 如果上一次有选择，RecyclerView滚动到指定position</span><br><span class="line">                &#125; else if (changeListener !&#x3D; null) &#123;</span><br><span class="line">                    &#x2F;&#x2F; 参数position代表的当前地区级别，父级地区ID应该选当前级别的上一个级别，如果没有默认返回-1</span><br><span class="line">                    changeListener.onSelectChange(position, levelIds.get(position -1, -1));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public void onTabUnselected(TabLayout.Tab tab) &#123;&#125;</span><br><span class="line">            @Override</span><br><span class="line">            public void onTabReselected(TabLayout.Tab tab) &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        addressAdapter &#x3D; new AddressAdapter();</span><br><span class="line">        &#x2F;&#x2F; 列表单项点击事件</span><br><span class="line">        addressAdapter.setOnItemClickListener(position -&gt; &#123;</span><br><span class="line">            final int selectedTabPosition &#x3D; tabLayout.getSelectedTabPosition(); &#x2F;&#x2F; 选中的Tab的position</span><br><span class="line">            levelIds.put(selectedTabPosition, levelList.get(selectedTabPosition).get(position).getId()); &#x2F;&#x2F; 更新选中的地区的ID</span><br><span class="line">            changeSelect(selectedTabPosition, position);</span><br><span class="line">            levelPosition.put(selectedTabPosition, position); &#x2F;&#x2F; 更新选中的地区在列表中的position</span><br><span class="line">            setTabText(selectedTabPosition, levelList.get(selectedTabPosition).get(position).getAddress()); &#x2F;&#x2F; 将选中的地区的名字显示在Tab上</span><br><span class="line">            if (selectedTabPosition &lt; maxLevel - 1 &amp;&amp; selectedTabPosition &#x3D;&#x3D; tabLayout.getTabCount() - 1) &#123; &#x2F;&#x2F; 如果没达到MaxLevel并且选中的Tab是最后一个就添加一个Tab，并且RecyclerView滚动到最顶部</span><br><span class="line">                tabLayout.addTab(createTab(), true);</span><br><span class="line">                recyclerView.smoothScrollToPosition(0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        recyclerView.setLayoutManager(new LinearLayoutManager(context));</span><br><span class="line">        recyclerView.setAdapter(addressAdapter);</span><br><span class="line">        tabLayout.addTab(createTab(), true); &#x2F;&#x2F; 默认添加一个Tab</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建一个请选择的tab并返回</span><br><span class="line">    private TabLayout.Tab createTab() &#123;</span><br><span class="line">        return tabLayout.newTab().setText(tabText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 当点击了RecyclerView条目的时候执行的方法</span><br><span class="line">    private void changeSelect(int selectedTabPosition, int nowClickPosition) &#123;</span><br><span class="line">        &#x2F;&#x2F; 保存下来的当前列表上一个点击位置.如果找不到该值，默认返回-1</span><br><span class="line">        final int lastPosition &#x3D; levelPosition.get(selectedTabPosition, -1);</span><br><span class="line">        &#x2F;&#x2F; 如果上一个点击位置和下一个点击位置相同，则不做改变</span><br><span class="line">        if (nowClickPosition &#x3D;&#x3D; lastPosition) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 如果不是最后一个并且又重新选择了级别地区，移除后面的Tab</span><br><span class="line">        final int count &#x3D; tabLayout.getTabCount();</span><br><span class="line">        &#x2F;&#x2F; 这里要倒过来移除Tab，不然会出现这样的情况，假如你有四个Tab，你移除第0个，接着移除第一个的话，第一个不是原来的第一个。因为你把第0个移除，原来的第一个就到了第0个的位置上。所以倒过来移除是明智的做法</span><br><span class="line">        if (selectedTabPosition &lt; count - 1) &#123;</span><br><span class="line">            TabLayout.Tab nowTab &#x3D; tabLayout.getTabAt(selectedTabPosition);</span><br><span class="line">            if (null !&#x3D; nowTab) nowTab.setText(tabText);</span><br><span class="line">            for (int i &#x3D; count - 1; i &gt; selectedTabPosition; i--) &#123;</span><br><span class="line">                &#x2F;&#x2F; 将相应地区级别的列表数据移除</span><br><span class="line">                levelList.remove(i);</span><br><span class="line">                &#x2F;&#x2F; 将之前选中的position重置为-1</span><br><span class="line">                levelPosition.put(i, -1);</span><br><span class="line">                &#x2F;&#x2F; 将之前记录的地区ID重置为-1</span><br><span class="line">                levelIds.put(i, -1);</span><br><span class="line">                tabLayout.removeTabAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 将现在选择的地区设置为已经选中</span><br><span class="line">        levelList.get(selectedTabPosition).get(nowClickPosition).setChecked(true);</span><br><span class="line">        &#x2F;&#x2F; 通过adapter更新列表单个对象</span><br><span class="line">        addressAdapter.notifyItemChanged(nowClickPosition);</span><br><span class="line">        if (lastPosition &gt;&#x3D; 0) &#123;</span><br><span class="line">            &#x2F;&#x2F; 将上一个选中的地区标记为未选中</span><br><span class="line">            levelList.get(selectedTabPosition).get(lastPosition).setChecked(false);</span><br><span class="line">            &#x2F;&#x2F; 通过adapter更新列表单个对象</span><br><span class="line">            addressAdapter.notifyItemChanged(lastPosition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 设置第几个tab的文字</span><br><span class="line">    private void setTabText(int tabPosition, String text) &#123;</span><br><span class="line">        TabLayout.Tab tab &#x3D; tabLayout.getTabAt(tabPosition);</span><br><span class="line">        if (null !&#x3D; tab) tab.setText(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; -----------------------------  以下是对外公开方法与接口  --------------------------</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *  设置Dialog的标题</span><br><span class="line">     * @param title 标题文字</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setDialogTitle(String title) &#123;</span><br><span class="line">        this.title &#x3D; title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *  设置在当前tab下还未选择区域时候tab默认显示的文字</span><br><span class="line">     * @param tabDefaultText 默认显示的文字</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setTabDefaultText(String tabDefaultText) &#123;</span><br><span class="line">        this.tabText &#x3D; tabDefaultText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *  设置地址最大级别（如：省，市，县，镇的话就是最大4级）</span><br><span class="line">     * @param level 最大级别</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setMaxLevel(int level) &#123;</span><br><span class="line">        this.maxLevel &#x3D; level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *  设置当前级别列表需要显示的列表数据</span><br><span class="line">     * @param list 列表数据</span><br><span class="line">     * @param level 地区级别</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setCurrentAddressList(List&lt;AddressItem&gt; list, int level) &#123;</span><br><span class="line">        levelList.put(level, list);</span><br><span class="line">        addressAdapter.setList(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *  设置Dialog中Tab点击切换的监听</span><br><span class="line">     * @param listener tab切换监听实现</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setTabSelectChangeListener(@NonNull TabSelectChangeListener listener) &#123;</span><br><span class="line">        this.changeListener &#x3D; listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *  自定义的Tab切换监听接口</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public interface TabSelectChangeListener &#123;</span><br><span class="line">        void onSelectChange(int level, int parentId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用方法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">private void init() &#123;</span><br><span class="line">    mDialog &#x3D; new AddressBottomSheetDialog(this);</span><br><span class="line">    mDialog.setDialogTitle(&quot;配送至&quot;);</span><br><span class="line">    mDialog.setMaxLevel(4);</span><br><span class="line">    mDialog.setTabDefaultText(&quot;请选择&quot;);</span><br><span class="line">    mDialog.setTabSelectChangeListener((level, parentId) -&gt;</span><br><span class="line">            mDialog.setCurrentAddressList(requestAddress(level, parentId), level)</span><br><span class="line">    );</span><br><span class="line">    binding.userIvSelectAddress.setOnClickListener(v -&gt; mDialog.show());</span><br><span class="line">&#125;</span><br><span class="line">private List&lt;AddressItem&gt; requestAddress(int level, int parentID) &#123;</span><br><span class="line">    List&lt;AddressItem&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    String levelTxt &#x3D; &quot;未知&quot;;</span><br><span class="line">    switch (level) &#123;</span><br><span class="line">        case 0:</span><br><span class="line">            levelTxt &#x3D; &quot;省级&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 1:</span><br><span class="line">            levelTxt &#x3D; &quot;市级&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            levelTxt &#x3D; &quot;县级&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 3:</span><br><span class="line">            levelTxt &#x3D; &quot;镇级&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 32; i++) &#123;</span><br><span class="line">        AddressItem item &#x3D; new AddressItem();</span><br><span class="line">        item.setChecked(false);</span><br><span class="line">        item.setAddress(levelTxt + i);</span><br><span class="line">        list.add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    return list;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>虽然上面的代码已经有很详细的注释，但是还是有一些东西没细讲，比如SparseArray是什么等等。</li><li>SparseArray是什么？SparseArray后面需要一个泛型，SparseArray<T>，可以理解为是HashMap&lt;Integer, T&gt;。但是为什么不用HashMap而使用这个东西？SparseArray是谷歌专门为安卓打造的Map，优点是省内存，占用内存没HashMap大。之前我的做法是省级列表数据一个list，市级一个list。。。这种写法，不但耦合度高，用户也不能自定义最大的地区级别是多少，而且在写法过程中少不了各种switch判断。后来灵机一动，Tab选中的position就是代表的一个级别，直接通过Map来取对应级别的list出来不就好了。</li><li>SparseIntArray是什么？其实它就相当于SparseArray<Integer>，谷歌还为我们封装了其他基本数据类型的SparseArray，它们就是SparseBooleanArray和SparseLongArray，用法都是相似的。</li><li>为什么不使用一个成员变量来记录当前选中的tab的position，然后在onTabSelected中更新该成员变量？之前我是这么做的，但是会出奇怪的问题：在市级重新选择之后，移除后面的tab后再重新选县级之后，TabLayout的横线不会移动到镇级上了。不知道什么原因造成的，猜测可能是onTabSelected触发时机造成选中的Tab的position更新不及时。如果有知道的旁友还望不吝赐教。如下图：<br><img src="/images/%E5%9C%B0%E5%9D%80%E9%80%89%E6%8B%A9%E5%99%A8%E4%B9%8B%E5%89%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98.gif" alt="地址选择器之前出现的问题"></li></ol><h4 id="20190422更新"><a href="#20190422更新" class="headerlink" title="20190422更新"></a>20190422更新</h4><ol><li>将AddressItem中的ID修改为Object类型，以适配不同业务数据，其他地方也进行了相应的修改</li><li>添加全部地区选择完成结果回调事件</li><li>修改一些代码逻辑，有兴趣改善的请Pull request</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;公司正在开发一个商城项目，因为项目需要，做了一个仿拼多多的地址选择器，但是与拼多多实现方法有些出入，大体效果是差不多的。&lt;br&gt;（2019年04月22日更新）最后决定还是单独提取出来做个demo给大家参考参考，地址：&lt;a href=&quot;https://github.com/cyixlq/AddressPickerDialog&quot;&gt;https://github.com/cyixlq/AddressPickerDialog&lt;/a&gt;&lt;br&gt;废话不多说，先上一张效果动图：&lt;br&gt;&lt;img src=&quot;/images/%E5%9C%B0%E5%9D%80%E9%80%89%E6%8B%A9%E5%99%A8%E6%95%88%E6%9E%9C%E5%9B%BE.gif&quot; alt=&quot;地址选择器效果图.gif&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.cyixlq.top/categories/Android/"/>
    
    
    <category term="自定义View实战" scheme="https://www.cyixlq.top/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>自定义一个下拉刷新控件</title>
    <link href="https://www.cyixlq.top/2019/02/19/refresh-layout/"/>
    <id>https://www.cyixlq.top/2019/02/19/refresh-layout/</id>
    <published>2019-02-19T10:01:46.000Z</published>
    <updated>2021-04-12T02:26:47.525Z</updated>
    
    <content type="html"><![CDATA[<p>第一次尝试写一个下拉刷新控件，一开始的目的只是想了解dispatchTouchEvent，onInterceptTouchEvent和onTouchEvent这几个事件的分别，没想到最后竟然写了一个刷新控件。好的，废话不多说，先来看看效果图：<br><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E6%95%88%E6%9E%9C%E5%9B%BE.gif" alt="自定义下拉刷新效果图.gif"></p><span id="more"></span><p>首先，我们还是需要搞清楚我上面说的这三个事件：</p><ol><li>先来看dispatchTouchEvent，这个事件是用来分发touch事件的，从Activity中的窗口开始进行事件分发，首先到根View，再到根View的子View依次传递。在我的测试中，无论是返回true还是false，都无法将touch事件分发到下一级，也就是子View。这个问题也困扰了我半天。看了别人自定义的下拉刷新控件，好像都没有重写这个方法。因此，个人的做法还是将此事件交给父类处理。对于这个事件我觉得我个人还得多了解了解！</li><li>其次看看onInterceptTouchEvent事件，这个方法就是拦截touch事件，你可以根据touch的事件类型分别进行拦截，本例中下拉刷新控件就需要利用此特性。返回false代表不拦截，返回true代表拦截。</li><li>onTouchEvent事件的作用就是处理touch事件，如果此View中没有下一级并且上一级没有对touch事件进行拦截或者此View中对touch事件进行了拦截，touch事件最终就会在此事件中处理，如果不处理的话就返回false，就会返回到上一级处理。如果处理了则返回true，这样的话就不会返回到上一级处理。<h5 id="开始我们的自定义下拉刷新View"><a href="#开始我们的自定义下拉刷新View" class="headerlink" title="开始我们的自定义下拉刷新View"></a>开始我们的自定义下拉刷新View</h5>我们先来理一理下拉刷新的逻辑。首先如果用户手指向上滑动，我们不需要进行事件的拦截，交给子View处理。如果用户手指是向下滑动的时候就要进行处理了。首先要看看刷新控件中的子View能不能继续向上滚动，也就是说子View有没有滚动到顶，如果到顶了，用户继续向下滑动的话就开始显示头部的刷新视图。至于是到顶后，拿开手指后再下拉显示刷新视图还是到顶后直接继续下拉就可以显示刷新视图就看项目需要了。我是实现的前者。然后就是显示刷新视图后，用户下拉多少，顶部就有多少留白，然后提示文字始终在留白的最中间位置。下拉到一定位置提示松手开始刷新。当下拉到最大距离，留白不再加大。最后松手，留白减少，并且提示正在刷新，最后提示刷新结果。</li></ol><p>首先我定义了一些变量来记录一些需要用到的值，变量说明都在注释中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 每次触摸事件中第一次接触屏幕的Y坐标</span><br><span class="line">private float downY;</span><br><span class="line">&#x2F;&#x2F; 手指在Y轴的滑动距离</span><br><span class="line">private float dY;</span><br><span class="line">&#x2F;&#x2F; 在刷新布局中的子View</span><br><span class="line">private View mTarget;</span><br><span class="line">&#x2F;&#x2F; 最大Y轴滑动距离</span><br><span class="line">private float maxDY &#x3D; 300;</span><br><span class="line">&#x2F;&#x2F; 头部View</span><br><span class="line">private View headerView;</span><br><span class="line">&#x2F;&#x2F; 下拉开始时显示的文字</span><br><span class="line">private String readyText &#x3D; &quot;下拉开始刷新&quot;;</span><br><span class="line">&#x2F;&#x2F; 下拉到触发刷新的下拉距离之后的提示文字</span><br><span class="line">private String refreshOkText &#x3D; &quot;松开开始刷新&quot;;</span><br><span class="line">&#x2F;&#x2F; 正在刷新时候提醒的文字</span><br><span class="line">private String refreshingText &#x3D; &quot;正在刷新&quot;;</span><br><span class="line">&#x2F;&#x2F; 刷新成功的提示文字</span><br><span class="line">private String refreshSuc &#x3D; &quot;刷新成功！&quot;;</span><br><span class="line">&#x2F;&#x2F; 刷新失败提醒的文字</span><br><span class="line">private String refreshFail &#x3D; &quot;刷新失败！&quot;;</span><br><span class="line">&#x2F;&#x2F; 触发刷新的距离</span><br><span class="line">private float refreshDist &#x3D; maxDY &#x2F; 2;</span><br><span class="line">&#x2F;&#x2F; 滑动多少距离才算是滑动，否则有时候是点击也会误触发滑动</span><br><span class="line">private int minDist;</span><br><span class="line">&#x2F;&#x2F; 是否触发了刷新</span><br><span class="line">private boolean canRefresh &#x3D; false;</span><br><span class="line">&#x2F;&#x2F; 正在刷新？</span><br><span class="line">private boolean isRefreshing &#x3D; false;</span><br><span class="line">&#x2F;&#x2F; 控件状态监听</span><br><span class="line">private RefreshStateListender listener;</span><br><span class="line">&#x2F;&#x2F; 状态表示代码</span><br><span class="line">private final int READY_REFRESH &#x3D; 0; &#x2F;&#x2F; 刚开始下拉时候的状态</span><br><span class="line">private final int CAN_REFRESH &#x3D; 1; &#x2F;&#x2F; 已经可以触发刷新的状态</span><br><span class="line">private final int ON_REFRESH &#x3D; 2; &#x2F;&#x2F; 正在刷新的状态</span><br><span class="line">private final int ON_FINISH &#x3D; 3; &#x2F;&#x2F; 刷新完成的状态</span><br></pre></td></tr></table></figure><p>接着我们就要来处理一下事件的拦截，从我们上面理好的逻辑中知道，我们主要处理用户下拉手势。首先我们就应当知道用户到底是在上拉还是在下拉。我的做法是，当用户第一次触摸到屏幕的时候，我记录下这个点的Y轴位置为初始Y轴位置，然后在用户的滑动过程中，获取滑动的点的Y轴位置减去初始Y轴位置。如果结果为负数，代表是上拉，如果是正数就代表下拉然后对事件进行拦截。但是，我在实现过程中发现不能通过判断正负拦截，因为点击也是属于touch事件的一种，但是你不能确保在用户的点击过程中会发生一点点的滑动，这样就会造成子View的点击事件也可能会被拦截。因此Android提供了一个值，滑动距离小于这个值会被系统认为是点击，大于这个值系统会认为这是滑动。根据ROM的不同，这个值也会不同。就像上面代码中，我用<code>minDist</code>这个变量将值保存下来，获取这个值的方法是：<code>minDist = ViewConfiguration.get(context).getScaledTouchSlop()</code>。然后我们通过判断滑动的点的Y轴位置减去初始Y轴位置是否大于minDist来判断上拉还是下拉。最后说一下，Android好像提供了判断用户是上拉还是下拉的方法，我还没去研究，暂时先这样处理。还一个问题，我们怎么知道子View是否滑动到了顶部呢？我为此特意看了一下Android中SwipeRefreshLayout的源码，其中有一串代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private boolean canChildScrollUp() &#123;</span><br><span class="line">    return this.mTarget instanceof ListView ? ListViewCompat.canScrollList((ListView)this.mTarget, -1) : this.mTarget.canScrollVertically(-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这串代码就是判断子View是否能向上滚动，源码中还有一层我没摘录下来，我就觉得这段对我有用。<br>然后，我们还需要把子View保存下来，不然<code>this.mTarget</code>就是空指针，代码如下(SwipeRefreshLayout也是类似做法)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private void ensureTarget() &#123;</span><br><span class="line">    if (this.mTarget &#x3D;&#x3D; null) &#123;</span><br><span class="line">        final int count &#x3D; this.getChildCount();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; count; i++) &#123;</span><br><span class="line">            View childView &#x3D; getChildAt(i);</span><br><span class="line">            if (!headerView.equals(childView)) &#123;</span><br><span class="line">                this.mTarget &#x3D; childView;</span><br><span class="line">                if (mTarget.getBackground() &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    mTarget.setBackgroundColor(Color.WHITE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class="line">    super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">    this.ensureTarget();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123;</span><br><span class="line">    super.onLayout(changed, left, top, right, bottom);</span><br><span class="line">    this.ensureTarget();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>截下来拦截下来的事件的处理了，从这一段开头理的逻辑中知道，下拉到一定位置才能触发刷新，如果处于刷新状态再下拉什么的就全部由子View处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">    int action &#x3D; event.getAction();</span><br><span class="line">    if (action &#x3D;&#x3D; MotionEvent.ACTION_MOVE) &#123;</span><br><span class="line">        dY &#x3D; event.getY() - downY;</span><br><span class="line">        if ((dY &gt;&#x3D; minDist &amp;&amp; dY &lt;&#x3D; maxDY) &amp;&amp; !isRefreshing) &#123; &#x2F;&#x2F; 如果没有正在刷新并且是下拉状态，并且没有超过最大下拉距离</span><br><span class="line">            mTarget.setTranslationY(dY);</span><br><span class="line">            if (dY &gt; headerView.getMeasuredHeight()) &#123; &#x2F;&#x2F; 下拉距离超过headerView的高度，headerView在Y轴就要开始移动</span><br><span class="line">                headerView.setTranslationY((dY - headerView.getMeasuredHeight()) &#x2F; 2);</span><br><span class="line">            &#125;</span><br><span class="line">            if (dY &gt; refreshDist) &#123; &#x2F;&#x2F; 已经到了可以触发刷新的下拉距离</span><br><span class="line">                configHeaderView(refreshOkText, CAN_REFRESH);</span><br><span class="line">                canRefresh &#x3D; true;</span><br><span class="line">            &#125; else &#123; &#x2F;&#x2F; 已经下拉但是还没到可以触发刷新的距离</span><br><span class="line">                configHeaderView(readyText, READY_REFRESH);</span><br><span class="line">                canRefresh &#x3D; false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (action &#x3D;&#x3D; MotionEvent.ACTION_UP) &#123; &#x2F;&#x2F; 松手触发刷新</span><br><span class="line">        if (dY &gt; maxDY) &#123;</span><br><span class="line">            dY &#x3D; maxDY;</span><br><span class="line">        &#125;</span><br><span class="line">        if (dY &gt; minDist) &#123;</span><br><span class="line">            if (!canRefresh &amp;&amp; !isRefreshing) &#123; &#x2F;&#x2F; 如果还不能触发刷新并且没有正在刷新，松手的话就回弹回去</span><br><span class="line">                ObjectAnimator.ofFloat(mTarget, &quot;translationY&quot;, dY, 0).setDuration(500).start();</span><br><span class="line">                ObjectAnimator.ofFloat(headerView, &quot;translationY&quot;,</span><br><span class="line">                        (dY - headerView.getMeasuredHeight()) &#x2F; 2, 0)</span><br><span class="line">                        .setDuration(500).start();</span><br><span class="line">            &#125; else if (!isRefreshing)&#123; &#x2F;&#x2F; 如果已经能触发刷新并且没有正在刷新，松手的话就回弹到最大距离的一半并且提示正在刷新</span><br><span class="line">                ObjectAnimator.ofFloat(mTarget, &quot;translationY&quot;, dY, refreshDist).setDuration(500).start();</span><br><span class="line">                ObjectAnimator animator &#x3D; ObjectAnimator.ofFloat(headerView, &quot;translationY&quot;,</span><br><span class="line">                        (dY - headerView.getMeasuredHeight()) &#x2F; 2, (refreshDist - headerView.getMeasuredHeight()) &#x2F; 2)</span><br><span class="line">                        .setDuration(500);</span><br><span class="line">                animator.addListener(new AnimatorListenerAdapter() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void onAnimationEnd(Animator animation) &#123;</span><br><span class="line">                                configHeaderView(refreshingText, ON_REFRESH);</span><br><span class="line">                                isRefreshing &#x3D; true;</span><br><span class="line">                                canRefresh &#x3D; false;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                animator.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dY &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，对外提供刷新完成的接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public void refreshFinish(boolean suc) &#123;</span><br><span class="line">    if (suc) &#123;</span><br><span class="line">        configHeaderView(refreshSuc, ON_FINISH, suc);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        configHeaderView(refreshFail, ON_FINISH, suc);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 刷新完成，提示刷新结果后</span><br><span class="line">    ObjectAnimator animator1 &#x3D; ObjectAnimator.ofFloat(mTarget, &quot;translationY&quot;, refreshDist, 0);</span><br><span class="line">    animator1.setDuration(200).setStartDelay(500);</span><br><span class="line">    animator1.start();</span><br><span class="line">    ObjectAnimator animator2 &#x3D; ObjectAnimator.ofFloat(headerView, &quot;translationY&quot;,</span><br><span class="line">            (refreshDist - headerView.getMeasuredHeight()) &#x2F; 2, 0);</span><br><span class="line">    animator2.setDuration(200).setStartDelay(500);</span><br><span class="line">    animator2.addListener(new AnimatorListenerAdapter() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onAnimationEnd(Animator animation) &#123;</span><br><span class="line">            isRefreshing &#x3D; false;</span><br><span class="line">            canRefresh &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    animator2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一些设置刷新监听的代码并没有放到本文中讲解，这一部分感觉很简单，可以到源码中查看更多详细内容，注释也都很详细。源码地址：<a href="https://github.com/cyixlq/ViewTest">https://github.com/cyixlq/ViewTest</a></p><h5 id="至此，一个简单的下拉刷新控件就完成了！这些代码肯定还是很繁琐，有很多有用的API我还没熟悉，希望以后能更进一步，把代码写的更精炼。"><a href="#至此，一个简单的下拉刷新控件就完成了！这些代码肯定还是很繁琐，有很多有用的API我还没熟悉，希望以后能更进一步，把代码写的更精炼。" class="headerlink" title="至此，一个简单的下拉刷新控件就完成了！这些代码肯定还是很繁琐，有很多有用的API我还没熟悉，希望以后能更进一步，把代码写的更精炼。"></a>至此，一个简单的下拉刷新控件就完成了！这些代码肯定还是很繁琐，有很多有用的API我还没熟悉，希望以后能更进一步，把代码写的更精炼。</h5>]]></content>
    
    
    <summary type="html">&lt;p&gt;第一次尝试写一个下拉刷新控件，一开始的目的只是想了解dispatchTouchEvent，onInterceptTouchEvent和onTouchEvent这几个事件的分别，没想到最后竟然写了一个刷新控件。好的，废话不多说，先来看看效果图：&lt;br&gt;&lt;img src=&quot;/images/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E6%95%88%E6%9E%9C%E5%9B%BE.gif&quot; alt=&quot;自定义下拉刷新效果图.gif&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.cyixlq.top/categories/Android/"/>
    
    
    <category term="自定义View实战" scheme="https://www.cyixlq.top/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>博客音乐歌单外链</title>
    <link href="https://www.cyixlq.top/2019/01/30/iframe/"/>
    <id>https://www.cyixlq.top/2019/01/30/iframe/</id>
    <published>2019-01-30T13:03:21.000Z</published>
    <updated>2021-04-12T02:26:11.037Z</updated>
    
    <content type="html"><![CDATA[<h4 id="话不多说，直接先来看效果图："><a href="#话不多说，直接先来看效果图：" class="headerlink" title="话不多说，直接先来看效果图："></a>话不多说，直接先来看效果图：</h4><p><img src="/images/%E5%8D%9A%E5%AE%A2%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95%E5%A4%96%E9%93%BE%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="博客音乐歌单外链效果图"></p><span id="more"></span><h4 id="功能特色："><a href="#功能特色：" class="headerlink" title="功能特色："></a>功能特色：</h4><ol start="0"><li>支持QQ音乐，网易云音乐歌单外链</li><li>仿网易云歌单外链（包括功能）</li></ol><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><ol start="0"><li><p>需要传入的参数有三个依次是type，id，autoplay</p></li><li><p>首先确定你要制作的歌单外链的平台，暂时只支持QQ音乐，网易云音乐这两个音乐平台的歌单。如果是QQ音乐type取值tencent，网易云音乐取值netease。</p></li><li><p>获取你歌单的ID：</p><ul><li><p>QQ音乐：</p><ol><li><p>登录网页QQ音乐，选择你需要制作外链的歌单，点击分享，点击复制链接：<br><img src="/images/%E5%A4%8D%E5%88%B6%E5%88%86%E4%BA%AB%E6%AD%8C%E5%8D%95%E9%93%BE%E6%8E%A5.png" alt="复制分享歌单链接"></p></li><li><p>将复制好的链接粘贴到任何可以编辑的地方，然后将链接中的数字部分复制下来(这串数字就是你歌单的ID)：<br><img src="/images/%E5%A4%8D%E5%88%B6%E5%88%86%E4%BA%AB%E9%93%BE%E6%8E%A5%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E9%83%A8%E5%88%86.png" alt="复制分享链接中的数字部分"></p></li></ol></li><li><p>网易云音乐：</p><ol><li>登录网页网易云音乐，点击你创建的歌单：<br><img src="/images/%E7%82%B9%E5%87%BB%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%AD%E4%BD%A0%E5%88%9B%E5%BB%BA%E7%9A%84%E6%AD%8C%E5%8D%95.png" alt="点击网易云音乐中你创建的歌单"></li><li>打开歌单之后，将浏览器上的地址中数字部分复制下来，这就是你网易云音乐歌单的ID（PS：虽然网易云音乐支持生成外链歌单，但是需要会员或者付费的歌曲在歌单里面整个歌单是无法生成外链的；不过本歌单外链工具可以）：<br><img src="/images/%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95ID.png" alt="获取网易云音乐歌单ID"></li></ol></li></ul></li><li><p>将以下代码加到你的博客中，把type和id替换成你上面获取的值，另外链接中true代表自动播放，false表示不自动播放。另外需要知道，Chrome和Safari会禁用自动播放属性，设置成true可能也不会自动播放，在别的浏览器上可能可以：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; marginwidth&#x3D;&quot;0&quot; marginheight&#x3D;&quot;0&quot; width&#x3D;&quot;100%&quot; height&#x3D;450 src&#x3D;&quot;&#x2F;&#x2F;cyixlq.gitee.io&#x2F;iframe&#x2F;#&#x2F;type&#x2F;id&#x2F;true&quot;&gt;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure><p> 例如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; marginwidth&#x3D;&quot;0&quot; marginheight&#x3D;&quot;0&quot; width&#x3D;&quot;100%&quot; height&#x3D;450 src&#x3D;&quot;&#x2F;&#x2F;cyixlq.gitee.io&#x2F;iframe&#x2F;#&#x2F;tencent&#x2F;2947517062&#x2F;true&quot;&gt;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="致此，一个歌单外链就制作完成！"><a href="#致此，一个歌单外链就制作完成！" class="headerlink" title="致此，一个歌单外链就制作完成！"></a>致此，一个歌单外链就制作完成！</h4><h4 id="2021-04-12更新，因为所调用API失效，本框架随之也失效，各位还是用各大音乐平台提供的iframe吧！"><a href="#2021-04-12更新，因为所调用API失效，本框架随之也失效，各位还是用各大音乐平台提供的iframe吧！" class="headerlink" title="2021/04/12更新，因为所调用API失效，本框架随之也失效，各位还是用各大音乐平台提供的iframe吧！"></a>2021/04/12更新，因为所调用API失效，本框架随之也失效，各位还是用各大音乐平台提供的iframe吧！</h4>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;话不多说，直接先来看效果图：&quot;&gt;&lt;a href=&quot;#话不多说，直接先来看效果图：&quot; class=&quot;headerlink&quot; title=&quot;话不多说，直接先来看效果图：&quot;&gt;&lt;/a&gt;话不多说，直接先来看效果图：&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/%E5%8D%9A%E5%AE%A2%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95%E5%A4%96%E9%93%BE%E6%95%88%E6%9E%9C%E5%9B%BE.png&quot; alt=&quot;博客音乐歌单外链效果图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://www.cyixlq.top/categories/Vue/"/>
    
    
    <category term="vue" scheme="https://www.cyixlq.top/tags/vue/"/>
    
    <category term="音乐播放" scheme="https://www.cyixlq.top/tags/%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE/"/>
    
    <category term="博客音乐外链" scheme="https://www.cyixlq.top/tags/%E5%8D%9A%E5%AE%A2%E9%9F%B3%E4%B9%90%E5%A4%96%E9%93%BE/"/>
    
    <category term="vue实战" scheme="https://www.cyixlq.top/tags/vue%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>higher-music 基于Vue的支持歌单外链的在线网页音乐播放器</title>
    <link href="https://www.cyixlq.top/2019/01/14/higher-music/"/>
    <id>https://www.cyixlq.top/2019/01/14/higher-music/</id>
    <published>2019-01-14T10:38:58.000Z</published>
    <updated>2021-04-12T02:24:08.106Z</updated>
    
    <content type="html"><![CDATA[<p>一款基于Vue打造的网页在线音乐播放器，利用工作空闲时间与大学同学<a href="https://github.com/ganp1020">@ganp1020</a>一起开发。目前正在开发阶段，已经能正常使用。<strong>支持歌单外链这一特色功能！</strong></p><span id="more"></span><h3 id="项目演示地址："><a href="#项目演示地址：" class="headerlink" title="项目演示地址："></a>项目演示地址：</h3><ul><li><a href="http://cyixlq.gitee.io/music/">http://cyixlq.gitee.io/music/</a></li></ul><h3 id="实现的功能："><a href="#实现的功能：" class="headerlink" title="实现的功能："></a>实现的功能：</h3><ul><li>上一曲</li><li>下一曲</li><li>暂停/播放</li><li>音质选择</li><li>遇到没有的音质自动切换音质源</li><li>音乐搜索</li><li>播放列表展示</li><li>正在播放歌曲标志</li><li>歌单全部播放</li><li>歌单，歌曲top榜显示</li><li>同时适配桌面端和移动端</li></ul><h3 id="项目技术："><a href="#项目技术：" class="headerlink" title="项目技术："></a>项目技术：</h3><ul><li>vue</li><li>vue-router</li><li>vuex</li><li>axios</li><li>jsonp</li><li><a href="https://vuetifyjs.com/zh-Hans/">Vuetify</a></li></ul><h3 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h3><p><img src="/images/higher-music1.png" alt="Top榜单及Top歌曲"><br><img src="/images/higher-music2.png" alt="歌曲搜索以及热搜关键词"><br><img src="/images/higher-music3.png" alt="歌单详情"><br><img src="/images/higher-music4.png" alt="播放列表"></p><h3 id="特色功能-——-歌单外链的使用方法：-已经从此项目中独立出来，点我前往查看"><a href="#特色功能-——-歌单外链的使用方法：-已经从此项目中独立出来，点我前往查看" class="headerlink" title="特色功能 —— 歌单外链的使用方法：(已经从此项目中独立出来，点我前往查看)"></a>特色功能 —— 歌单外链的使用方法：(已经从此项目中独立出来，<a href="https://cyixlq.top/2019/01/30/iframe/">点我前往查看</a>)</h3><p>除了像一个正常网页音乐播放器外，还支持一个个人认为比较牛逼的功能 —— 歌曲外链，使用方法如下：</p><ol><li><p>登录网页QQ音乐，选择你需要制作外链的歌单，点击分享，点击复制链接：<br><img src="/images/%E5%A4%8D%E5%88%B6%E5%88%86%E4%BA%AB%E6%AD%8C%E5%8D%95%E9%93%BE%E6%8E%A5.png" alt="复制分享歌单链接"></p></li><li><p>将复制好的链接粘贴到任何可以编辑的地方，然后将链接中的数字部分复制下来：<br><img src="/images/%E5%A4%8D%E5%88%B6%E5%88%86%E4%BA%AB%E9%93%BE%E6%8E%A5%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E9%83%A8%E5%88%86.png" alt="复制分享链接中的数字部分"></p></li></ol><ol start="3"><li>在你博客中需要接入外链的地方加入以下代码(请注意，将下面链接中的<code>2947517062</code>替换成你上一步中复制的数字，如果不需要播放器自动播放请将下面<code>true</code>改成<code>false</code>，iframe的宽高你可以自定义，Chrome可能会禁止iframe内音频自动播放)： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; marginwidth&#x3D;&quot;0&quot; marginheight&#x3D;&quot;0&quot; width&#x3D;&quot;100%&quot; height&#x3D;450 src&#x3D;&quot;&#x2F;&#x2F;cyixlq.gitee.io&#x2F;music&#x2F;#&#x2F;iframe&#x2F;2947517062&#x2F;true&quot;&gt;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure></li><li>效果图如下：<br><img src="/images/%E5%A4%96%E9%93%BE%E6%AD%8C%E5%8D%95%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="外链歌单效果图"></li></ol><h3 id="到这里，你的音乐外链就制作完成，注意并不是所有歌曲的播放地址都能解析出来，还望谅解，如果你喜欢本项目的话或者本项目对你有一定帮助的话，可以扫描下方二维码进行捐赠，以此来维持服务器的运转："><a href="#到这里，你的音乐外链就制作完成，注意并不是所有歌曲的播放地址都能解析出来，还望谅解，如果你喜欢本项目的话或者本项目对你有一定帮助的话，可以扫描下方二维码进行捐赠，以此来维持服务器的运转：" class="headerlink" title="到这里，你的音乐外链就制作完成，注意并不是所有歌曲的播放地址都能解析出来，还望谅解，如果你喜欢本项目的话或者本项目对你有一定帮助的话，可以扫描下方二维码进行捐赠，以此来维持服务器的运转："></a>到这里，你的音乐外链就制作完成，注意并不是所有歌曲的播放地址都能解析出来，还望谅解，如果你喜欢本项目的话或者本项目对你有一定帮助的话，可以扫描下方二维码进行捐赠，以此来维持服务器的运转：</h3><p><img src="/images/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8D%90%E8%B5%A0.png" alt="服务器捐赠"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一款基于Vue打造的网页在线音乐播放器，利用工作空闲时间与大学同学&lt;a href=&quot;https://github.com/ganp1020&quot;&gt;@ganp1020&lt;/a&gt;一起开发。目前正在开发阶段，已经能正常使用。&lt;strong&gt;支持歌单外链这一特色功能！&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://www.cyixlq.top/categories/Vue/"/>
    
    
    <category term="vue" scheme="https://www.cyixlq.top/tags/vue/"/>
    
    <category term="音乐播放" scheme="https://www.cyixlq.top/tags/%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE/"/>
    
    <category term="博客音乐外链" scheme="https://www.cyixlq.top/tags/%E5%8D%9A%E5%AE%A2%E9%9F%B3%E4%B9%90%E5%A4%96%E9%93%BE/"/>
    
    <category term="vue实战" scheme="https://www.cyixlq.top/tags/vue%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>UHD630核显驱动方法及驱动后闪屏严重问题解决记录</title>
    <link href="https://www.cyixlq.top/2018/12/10/UHD630%E9%A9%B1%E5%8A%A8%E5%90%8E%E9%97%AA%E5%B1%8F%E4%B8%A5%E9%87%8D/"/>
    <id>https://www.cyixlq.top/2018/12/10/UHD630%E9%A9%B1%E5%8A%A8%E5%90%8E%E9%97%AA%E5%B1%8F%E4%B8%A5%E9%87%8D/</id>
    <published>2018-12-10T15:34:32.000Z</published>
    <updated>2021-04-12T02:28:47.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前我同学在公司申请了一个台式，硬件是由自己挑选，公司购买。于是乎，我和他一起挑选了兼容性较好的黑苹果硬件，前天组装好。然后就在昨天开始安装黑苹果。</p><span id="more"></span><h3 id="同学的电脑硬件配置如下，给大家参考参考："><a href="#同学的电脑硬件配置如下，给大家参考参考：" class="headerlink" title="同学的电脑硬件配置如下，给大家参考参考："></a>同学的电脑硬件配置如下，给大家参考参考：</h3><ul><li>CPU：i5-9600K（一开始推荐的八代U，后来因为和主板组合买便宜点，选了这个。在CPU的选购上大家直接买八代U就好了，当然九代也是可以安装黑苹果的）</li><li>主板：技嘉z370 HD3（因为加上CPU套装组合买便宜，因此也留下了一个坑。z370或者说370系列主板只支持八代U的，如果要支持九代U得先用八代U点亮后进入BISO升级一下BIOS版本）</li><li>电源：直接选了个300W功率的的，型号牌子什么的不记得了</li><li>机箱：这个直接跟着主板板型来选就好了，没什么特殊要求随便选选就好。因为我们选购的主板是ATX板型的，就直接选了个兼容ATX的机箱</li><li>CPU散热器：买了个四铜管的散热器</li><li>内存条：买了两根16G的DDR4 2600Mhz的骇客神条</li><li>硬盘：512G Intel NVme固态硬盘</li><li>显示器：同学自己买的LG 2K宽屏</li><li>键鼠：随便买，能用就行，最好是插USB的  其实挑好CPU和主板是最关键的。</li></ul><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>镜像：<a href="https://blog.daliansky.net/macOS-Mojave-10.14.2-18C54-official-version-with-Clover-4792-original-image.html">【黑果小兵】macOS Mojave 10.14.2 18C54 正式版 with Clover 4792原版镜像</a>；下载完之后一定要校验一下MD5，确保完整性。</p><p>制作安装U盘：在另一个电脑上，Windows下使用TransMac制作好安装U盘，这个就不说了，网上一大堆教程。</p><p>BIOS设置：</p><ul><li><p>vt-d -&gt; disable</p></li><li><p>DVMT Pre-Allcated -&gt; 128M (以后万一要接4K显示屏)</p></li><li><p>DVMT Total Gfx Mem -&gt; Max</p></li><li><p>快速启动（boot quick） -&gt; disable</p><p>  这块主板发现就这几个地方需要改改，如果还有我没发现的，大家可以留言</p></li></ul><p>开始安装：制作好之后，把U盘插在后置USB2.0接口。这里说一下，最好插后面的USB接口，而且最好插在USB2.0接口上，减少禁行的发生。之后从BIOS中选择从U盘启动，进入四叶草。光标移动到options选项，回车；configs，回车；选择了config_UHD630这个配置文件。之后return，选择boot macOS Install form Install macOS Mojave，然后就开始跑代码了。<br><img src="/images/%E5%9B%9B%E5%8F%B6%E8%8D%89%E5%BC%95%E5%AF%BC%E7%95%8C%E9%9D%A2.jpg" alt="四叶草引导界面.jpg"><br>代码跑完之后出现苹果logo和进度条。进度条读完之后，进入了安装界面。先选择语言，当然选择简体中文啊。<br><img src="/images/%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9%E7%95%8C%E9%9D%A2.jpg" alt="语言选择界面"><br>之后工具选择界面，先选择磁盘工具，然后左侧选择我们的硬盘，然后点击抹掉。名称自己随便取，英文的不要太长就好。我们取的APPLE SSD。下面这一栏格式选择Mac OS拓展（日志），接着下面一栏选择GUID分区表格式，点击抹掉，然后点击完成。因为这是一块新的硬盘，抹掉会自动有一个大于200M的EFI分区。</p><p>PS：如果你是已经装过Windows的硬盘，请确保你的EFI分区大于200M，否则会造成这一步抹盘失败。如果你的小于200M，给你一个比较好的解决办法。关机，拔下U盘，用一个装了PE的U盘启动，打开diskgenius磁盘管理工具，看看有没有MSR分区，有的话就右键这个分区，删除这个分区，然后右键EFI分区调整大小，直接把中间的杠杠拉倒最右边。如果没有的话，就悲催了，重新给你硬盘分一下区吧，这次记得把EFI分区调大一点。</p><p>抹盘这一步操作完成之后，我们就可以关掉磁盘工具了。这次我们点击安装Mac OS，出现硬盘选择界面，选择我们刚刚抹好的盘，名字是APPLE SSD。之后就是协议什么的，同意就行。然后就是一段时间的等待。NVme的速度不错，两三分钟就完成了第一部分的安装。机器自动重启！</p><p>重启后我们依旧从U盘启动，进入clover，选择options选项回车，选择configs回车，选择config_UHD630回车。然后return，这次我们选择的启动项是boot macOS Install from APPLE SSD（此处的APPLE SSD是我们之前抹盘的时候命名的名称，请根据你的实际情况选择）。然后开始跑代码，一切正常，出现苹果logo还有进度条。进度条下面出现了一行字，正在安装，剩余大约3分钟。<br><img src="/images/%E5%AE%89%E8%A3%85%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5.jpg" alt="安装第二阶段"><br>这里说明一下，现在苹果系统安装有两个阶段，我的理解是上一步的安装是把苹果系统的安装程序复制到硬盘中，这一步是用硬盘中的安装程序把系统安装到硬盘上。以前我记得是只有一步的，这样做可能是为了提高安装系统的速度，毕竟从U盘中执行安装程序和硬盘中执行安装程序相比肯定是更慢的。好的，回到正题，等这一步安装完成之后，我们的系统才算是真正安装到硬盘了。机器依旧自动重启，还是选择从U盘进去clover，选择options选项回车，选择configs回车，选择config_UHD630回车。然后return，这次的启动项我们选择boot macOS from APPLE SSD（一样的，APPLE SSD是我们之前抹盘时候命名的硬盘名称，请根据你自己的实际情况来）。一样跑代码，一样正常显示苹果logo加进度条，然后进入了系统。然后是引导设置，这些很简单，自己按照引导设置。</p><h3 id="UHD630核显的驱动"><a href="#UHD630核显的驱动" class="headerlink" title="UHD630核显的驱动"></a>UHD630核显的驱动</h3><p>进入系统后，点击左上角的小苹果图标/关于本机，发现显存只有7M，也就是意味着核显并没有驱动上。理论上最新版Lilu.kext加上whatevergreen.kext这两个驱动，只要配置文件中Graphics/Inject Intel勾选上就能原生注入驱动的。但是不知道我同学的怎么没驱动上。只好自己动手了，使用Intel FB Patcher这款软件，教程：<a href="https://blog.daliansky.net/Intel-FB-Patcher-tutorial-and-insertion-pose.html">Intel FB-Patcher使用教程及插入姿势</a>。拓展阅读：<a href="https://www.jianshu.com/p/d3686b6f3ef6">【黑苹果显卡驱动】通过Device/properties 给Framebuffer打补丁一点经验</a>。视频演示：<a href="https://www.bilibili.com/video/av35104213?from=search&seid=4950317082513025527">Intel FB-Patcher正确演示1102修改</a>。不过在此之前，我们还是让系统脱离U盘引导。使用Clover Configurator这款软件（后文中简称CFG软件）点击左侧mount EFI选项卡，选择我们硬盘上的EFI分区。<br><img src="/images/%E6%8C%82%E8%BD%BDEFI%E5%88%86%E5%8C%BA.png" alt="挂载EFI分区"><br>点击图中箭头所指的按钮后输入我们引导设置中设置的电脑密码就可以挂载硬盘上的EFI分区。同样使用这个方法也可以挂载U盘上的EFI分区。之后，我们把U盘中的efi分区EFI文件夹下的CLOVER文件夹和BOOT文件夹复制到硬盘efi分区的EFI文件夹下。复制好后打开硬盘中的EFI分区中的CLOVER文件夹，删除除去config_UHD630的其他plist配置文件，并且把config_UHD630.plist重命名为config.plist并且用CFG软件打开，点击左侧SMBIOS，右边点击一个上下在一起的箭头选择机型，以此来配置我们的黑苹果机型。我这里选择的是iMac18,3。<br><img src="/images/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CFG%E7%94%9F%E6%88%90%E6%9C%BA%E5%9E%8B.png" alt="如何使用CFG生成机型"><br>现在就可以通过硬盘启动引导了，我们把U盘推出拔掉。下一段，我要好好说一下遇到的一些坑。</p><h3 id="驱动核显遇到的坑"><a href="#驱动核显遇到的坑" class="headerlink" title="驱动核显遇到的坑"></a>驱动核显遇到的坑</h3><p>一开始用软件生成了config.plist文件放在桌面，使用CFG软件打开，同时打开硬盘EFI分区中的config文件。桌面的config文件使用CFG软件打开后，左侧选Devices，右下角点击Properties，可以看到需要打的补丁在里面了。在下面一小栏中左侧右键copy，粘贴到硬盘的EFI分区中的config文件对应位置。（上面视频演示中是直接把打好补丁的配置文件导出到硬盘EFI分区，这么做的话他会自动把补丁拷贝到硬盘的配置文件中，同时把原来的配置文件备份，我这里是手动复制过去）。补丁打好之后，重启发现显卡虽然驱动上了，显存2048M，但是屏幕一直在闪，眼睛都快要瞎掉那种。一开始我以为是因为同学2K屏屏幕的缘故，故调整一下参数：</p><ul><li>framebuffer-stolenmem:00003001 -&gt; 00000008(19M改128M)</li><li>framebuffer-unifiedmem:00000080 -&gt; 000000C0(显存调整成3G)</li><li>framebuffer-fbmem:00009000 -&gt; 00000003(fb内存9M改48M)</li></ul><p>添加一个参数：</p><ul><li>framebuffer-cursormem -&gt; 00000003(cursor内存设置为48M)</li></ul><p>修改好之后，保存，通过硬盘启动。竟然发现内核崩溃了，原因是framebuffer补丁没打好。<br><img src="/images/%E5%86%85%E6%A0%B8%E5%B4%A9%E6%BA%83.png" alt="内核崩溃"><br>可是我明明打了啊，还是按照高分屏来打的啊！后来我猜测，framebuffer-stolenmem翻译成中文意思是丢失的内存，作用可能是给BIOS中添加DVMT内存的。4K屏需要128M或以上，普通屏幕需要32M以上，而笔记本一般不能在bios设置这个，而一般大小可能是32M，具体多少我不清楚，所以只能通过这个补一个19M上去，这样就会大于32M了。可是要知道我们一开始在BIOS里面就设置成了128M，然后我们又加了一个128M，可能是这个DVMT内存过大导致补丁反而没打上去。有了这个猜想，用U盘引导启动，进入系统后我又把这个改回去了。之后关机，又用硬盘引导启动，发现能进去系统（原来我的猜想是正确的，吓得我赶紧去改了一下我的博客：<a href="https://www.jianshu.com/p/d3686b6f3ef6">【黑苹果显卡驱动】通过Device/properties 给Framebuffer打补丁一点经验</a>）。显存也是3G，但是还是不停在闪屏。莫非闪屏不是这些的影响？幸运的是，在网上爬帖发现也有人遇到这个问题，驱动UHD630之后却一直在闪屏，他们通过把进行修改成iMac18,1解决了。原来这么简单就可以解决。果然，我使用CFG软件编辑硬盘上的config配置文件，修改SMBIOS为iMac18,1之后不会闪屏了。</p><h3 id="声卡驱动"><a href="#声卡驱动" class="headerlink" title="声卡驱动"></a>声卡驱动</h3><p>这一部分比较简单，因为这块主板声卡驱动有先例，我知道这块板子的layout-id该注入多少。（layout-id影响着声卡输出路线。个人理解：比如声卡通过什么线路输出到前置耳机孔、后置耳机孔、内置扬声器啊什么的。中文意思就是布局id，顾名思义，有点输出线路布局的味道。也就是声卡通过什么线路输出通过这个id决定，填对了才会有声音嘛。词穷，我也不知道怎么解释，想知道有哪些数字可以看我上一篇博客<a href="https://www.jianshu.com/p/8c9abd4f5b66">《记一次黑苹果安装》</a>）。这块主板layout-id是92，我们通过CFG软件打开硬盘上的config配置文件，在图中位置填上92。<br><img src="/images/%E5%A3%B0%E5%8D%A1layout-id%E6%B3%A8%E5%85%A5.png" alt="声卡layout-id注入"><br>然后打开硬盘EFI分区：CLOVER/kexts/other，打开这个文件夹之后打开这个文件夹下的<code>其他驱动</code>文件夹，把<code>AppleALC</code>最新版这个驱动放到<code>other</code>目录下。记得保存好配置文件之后重启一下，声卡就成功驱动上了。最后，附上一张关于本机图片：<br><img src="/images/%E5%85%B3%E4%BA%8E%E6%9C%AC%E6%9C%BA.jpg" alt="关于本机"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前我同学在公司申请了一个台式，硬件是由自己挑选，公司购买。于是乎，我和他一起挑选了兼容性较好的黑苹果硬件，前天组装好。然后就在昨天开始安装黑苹果。&lt;/p&gt;</summary>
    
    
    
    <category term="黑苹果" scheme="https://www.cyixlq.top/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
    
    <category term="显卡驱动" scheme="https://www.cyixlq.top/tags/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    
    <category term="问题解决记录" scheme="https://www.cyixlq.top/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/"/>
    
    <category term="黑苹果安装" scheme="https://www.cyixlq.top/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>【黑苹果显卡驱动】通过Device/properties 给Framebuffer打补丁一点经验</title>
    <link href="https://www.cyixlq.top/2018/12/04/FB-patcher/"/>
    <id>https://www.cyixlq.top/2018/12/04/FB-patcher/</id>
    <published>2018-12-03T17:21:47.000Z</published>
    <updated>2021-04-12T02:22:26.760Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文参考Coffee-Lake帧缓冲区补丁及UHD630-Coffee-Lake-ig-platform-id数据整理，算是对文章的一种补充吧！注意，本篇文章不适合小白阅读！"><a href="#本文参考Coffee-Lake帧缓冲区补丁及UHD630-Coffee-Lake-ig-platform-id数据整理，算是对文章的一种补充吧！注意，本篇文章不适合小白阅读！" class="headerlink" title="本文参考Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理，算是对文章的一种补充吧！注意，本篇文章不适合小白阅读！"></a>本文参考<a href="https://blog.daliansky.net/Coffee-Lake-frame-buffer-patch-and-UHD630-Coffee-Lake-ig-platform-id-data-finishing.html">Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理</a>，算是对文章的一种补充吧！注意，本篇文章不适合小白阅读！</h3><span id="more"></span><h3 id="一，打这个补丁有什么用处？"><a href="#一，打这个补丁有什么用处？" class="headerlink" title="一，打这个补丁有什么用处？"></a>一，打这个补丁有什么用处？</h3><p>打这个补丁就能成功驱动你的<code>核显</code>，让它正常工作。如果已经成功驱动了核显的就没必要看了。</p><h3 id="二，准备工作"><a href="#二，准备工作" class="headerlink" title="二，准备工作"></a>二，准备工作</h3><ul><li><p>添加启动参数 -cdfon，删除启动参数 -disablegfxfirmware</p></li><li><p>  删除<code>FakePCIID</code>,<code>IntelGraphicsFixup</code>,<code>NvidiaGraphicsFixup</code>,<code>Shiki</code>和<code>CoreDisplayFixup</code></p></li><li><p>关闭<code>Clover</code>里面关于<code>Graphics</code>注入的参数，这些参数包括：</p><ul><li>  config.plist/Graphics/Inject/ATI=NO</li><li>  config.plist/Graphics/Inject/Intel=NO</li><li>  config.plist/Graphics/Inject/NVidia=NO</li><li>  config.plist/Graphics/ig-platform-id=</li><li>  config.plist/Devices/FakeID/IntelGFX=</li></ul></li><li><p>关闭<code>Clover</code>里面关于<code>DSDT</code>的修复：</p><ul><li>  AddHDMI</li><li>  FixDisplay</li><li>  FixIntelGfx</li><li>  AddIMEI</li></ul></li><li><p>  禁用<code>UseIntelHDMI</code></p></li><li><p>  移除<code>boot argument</code>参数：<code>-disablegfxfirmware</code></p></li><li><p>移除<code>IGPU</code>和<code>HDMI</code>部分的全部内容，包括：</p><ul><li>  config.plist/Devices/Arbitrary</li><li>  config.plist/Devices/Properties</li><li>  config.plist/Devices/AddProperties</li></ul></li><li><p>  从CLOVER/ACPI/patched删除任何与<code>IGPU</code>和<code>HDMI</code>相关的<code>SSDT</code>和<code>DSDT</code></p></li><li><p>下载<code>WhateverGreen</code>和<code>Lilu</code>最新版本<br><a href="https://github.com/acidanthera/Lilu/releases">Lilu下载地址</a><br><a href="https://github.com/acidanthera/WhateverGreen/releases">WhateverGreen下载地址</a></p></li></ul><h3 id="三，确定获取iGPU显卡设备的路径"><a href="#三，确定获取iGPU显卡设备的路径" class="headerlink" title="三，确定获取iGPU显卡设备的路径"></a>三，确定获取iGPU显卡设备的路径</h3><p>下载并使用<a href="https://github.com/acidanthera/gfxutil/releases">gfxutil</a>工具，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gfxutil -f IGPU</span><br><span class="line">DevicePath &#x3D; PciRoot(0x0)&#x2F;Pci(0x2,0x0)</span><br></pre></td></tr></table></figure><p>这样我们确定了显卡路径之后，把<code>=</code>号之后的路径复制下来，填入如下图的所示的位置：<br><img src="/images/%E6%95%B0%E6%8D%AE%E5%A1%AB%E5%85%A5%E5%B1%95%E7%A4%BA.png" alt="数据填入展示"></p><h3 id="四，一些参数介绍（除了第6个值必须设置，其他可选）"><a href="#四，一些参数介绍（除了第6个值必须设置，其他可选）" class="headerlink" title="四，一些参数介绍（除了第6个值必须设置，其他可选）"></a>四，一些参数介绍（除了第6个值必须设置，其他可选）</h3><ol><li>framebuffer-patch-enable（是否启用framebuffer补丁，当然启用啊，不启用的话这篇文章还有什么用处）：</li></ol><ul><li>DATA数据：01000000 -&gt; 1（启用）    00000000 -&gt; 0（不启用）</li><li>NUMBER数据：0（不启用）   1（启用）</li></ul><ol start="2"><li>framebuffer-stolenmem（给BIOS中DVMT添加一点内存大小，会影响高分屏，这个值必须大于32M，也不应该过高）：</li></ol><ul><li>一般1080P屏幕的话，设置为48M就够用了：00003001</li><li>当你的笔记本电脑屏幕是2k，你可以设置为64M：00000004</li><li>4K屏的话，要设置为128M：00000008<br>如果你的BIOS中可以设置DVMT的话并且你设置成为128M之后，可以不需要设置这个属性，或者这个属性设置小一点：00003001<br>保险起见，高分屏直接设置成128M比较稳，并且保证在BIOS能设置DVMT的情况下设置在64M或以下<br>（PS：这一部分可能有误，但是最后一句保险起见，高分屏直接设置成128M比较稳是试验过的）</li></ul><ol start="3"><li>framebuffer-unifiedmem（核显显存大小，调大一点可能能解决花屏）：</li></ol><ul><li>2048M：00000080</li><li>3072M：000000C0</li></ul><ol start="4"><li>framebuffer-cursormem（翻译成中文就是光标内存，会影响高分屏，比如高分屏花屏可能就是这个值不够大）：</li></ol><ul><li>一般屏幕设置成9M大小就好：00009000</li><li>高分屏的话最好直接设置成48M：00000003 </li></ul><ol start="5"><li>framebuffer-fbmem（framebuffer内存大小，会影响高分屏）：</li></ol><ul><li>一般屏幕设置成9M大小就好：00009000</li><li>高分屏的话最好直接设置成48M：00000003</li></ul><ol start="6"><li>AAPL,ig-platform-id（设备平台id，直接影响显卡是否能成功驱动）：<br>举例一些常用<code>笔记本</code>的核显id（PS：如果没有列举您的，还望自己爬帖查找，一般别人制作的原版镜像也会提供多个核显配置文件供你们使用，在里面Graphics/ig-platform-id也可以看到。或者您还可以参考我文章开头提供的文章链接查找）：</li></ol><ul><li>HD4600，HD4200，HD4000，HD5000，HD5100，HD5200：0a260006（如果不行设置后者），0a2e0008</li><li>HD5300，HD5500，HD6000：16260006</li><li>HD630：3e9b0000</li></ul><ol start="7"><li>device-id（设备id，可能是能让黑苹果正确显示设备信息，上面设备平台id一样的统一设置一个值）：</li></ol><ul><li>0a260006，0a2e0008：12040000</li><li>16260006：16160000</li><li>3e9b0000：9b3e0000<br>PS：本文没有收录的可以使用Intel FB Patcher这个软件查询，或者直接使用这个软件打补丁。具体用法：按照<a href="https://blog.daliansky.net/Intel-FB-Patcher-tutorial-and-insertion-pose.html">这篇文章</a>成功输出config.plist之后，把你正在使用的config文件中Devices/Properties中全部的参数和值删除，然后把输出的配置文件对应的参数与值复制过去。<a href="https://www.bilibili.com/video/av35104213?from=search&seid=4599094922106870017">视频演示</a></li></ul><ol start="8"><li>framebuffer-conN-enable（N为数字，显卡第N个输出接口是否启用，1为启用，0为不启用）：</li></ol><ul><li>DATA数据：01000000 -&gt; 1（启用）    00000000 -&gt; 0（不启用）</li><li>NUMBER数据：0（不启用）   1（启用）</li></ul><ol start="9"><li>framebuffer-conN-type（N为数字，显卡第N个输出接口的类型）：</li></ol><ul><li>00080000 ：HDMI输出</li><li>0004000：DP输出（好像是的吧，记不清）</li></ul><ol start="10"><li>framebuffer-conN-index（个人理解，显卡第N个输出接口的优先级，或者说是设置第N个输出口的位置）：<br>这个按个人需要设置，如果需要屏蔽这个输出口，可以设置成FFFFFFFF，也就是最大的数字，让它足够靠后，这样就达到了屏蔽效果！</li></ol><ul><li>最后，请注意，所有DATA数据类型需要将数据两两一组倒过来填入，例如：16260006转换之后就是这样06002616，如下图：<br><img src="/images/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A1%AB%E5%85%A5.png" alt="数据的填入"><br>所以你也可以发现，用framebuffer-fbmem参数举例，当需要设置为48M之后它应填入的值是：<code>00000003</code>，这个也是转换后的值，所以原来的值应当是<code>03000000</code>，这是一个16进制的数字，转换成10进制是<code>50331648</code>。我们知道1M=1024KB，1KB = 1024B，所以，我们把转换成十进制之后的数字<code>50331648</code>除以1024然后再除以1024，得出的结果就是48了，所以这串数字代表的就是48M。<a href="https://tool.lu/hexconvert/">点击这里前往进制转换网页</a><br>当然为了方便，你也可以直接像下图中切换成NUMBER数据类型，这样你就不用转换成16进制，不用倒过来输入（ig-platform必须为DATA）：<br><img src="/images/%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="转换数据类型"></li></ul><h2 id="后文"><a href="#后文" class="headerlink" title="后文"></a>后文</h2><p>本篇文章并不全面，还有一些参数没研究懂，毕竟黑苹果文化博大精深，所以当作者学习到新知识之后会不定期更新。喜欢的朋友可以点一波爱心，再顺手关注一下作者！</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;本文参考Coffee-Lake帧缓冲区补丁及UHD630-Coffee-Lake-ig-platform-id数据整理，算是对文章的一种补充吧！注意，本篇文章不适合小白阅读！&quot;&gt;&lt;a href=&quot;#本文参考Coffee-Lake帧缓冲区补丁及UHD630-Coffee-Lake-ig-platform-id数据整理，算是对文章的一种补充吧！注意，本篇文章不适合小白阅读！&quot; class=&quot;headerlink&quot; title=&quot;本文参考Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理，算是对文章的一种补充吧！注意，本篇文章不适合小白阅读！&quot;&gt;&lt;/a&gt;本文参考&lt;a href=&quot;https://blog.daliansky.net/Coffee-Lake-frame-buffer-patch-and-UHD630-Coffee-Lake-ig-platform-id-data-finishing.html&quot;&gt;Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理&lt;/a&gt;，算是对文章的一种补充吧！注意，本篇文章不适合小白阅读！&lt;/h3&gt;</summary>
    
    
    
    <category term="黑苹果" scheme="https://www.cyixlq.top/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
    
    <category term="黑苹果" scheme="https://www.cyixlq.top/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
    <category term="显卡驱动" scheme="https://www.cyixlq.top/tags/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>记一次黑苹果安装</title>
    <link href="https://www.cyixlq.top/2018/11/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85/"/>
    <id>https://www.cyixlq.top/2018/11/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85/</id>
    <published>2018-11-06T10:59:33.000Z</published>
    <updated>2021-04-12T02:20:28.367Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>其实一直想在苹果上做开发的，可是面对苹果硬件高昂的价格，我这个小穷逼只能望而却步，便产生了自己装黑苹果的念头。其实黑苹果我好早就接触过，但是是给我笔记本装的，还是用别人配置好的，装起来就像装白果那么简单。我还没自己尝试过自己配置呢，所以才有了这次在台式机上的安装的一次新的体会。请注意，本篇文章并不是教程，更多的是一篇心得体会。另外要说一下，台式机黑苹果是比笔记本要简单的，特别是你使用了能很好兼容的硬件。</p><span id="more"></span><h3 id="一，关于配置"><a href="#一，关于配置" class="headerlink" title="一，关于配置"></a>一，关于配置</h3><p>既然是装系统，硬件配置肯定要贴一下吧，如下图，是我台式机的硬件配置：<br><img src="/images/%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE.jpg" alt="电脑配置"><br>另外给大家推荐一下这个网站，<a href="https://www.tonymacx86.com/">https://www.tonymacx86.com/</a>，进去这个网站，点击Buyer’s Guide选项卡，里面有很多推荐的电脑硬件配置，只要根据里面的硬件来配置的话，都很容易吃上黑苹果的。</p><h3 id="二，镜像写入，制作安装U盘"><a href="#二，镜像写入，制作安装U盘" class="headerlink" title="二，镜像写入，制作安装U盘"></a>二，镜像写入，制作安装U盘</h3><p>首先我们要做的是下载镜像，很多网站都可以下载别人做好的镜像，带四叶草的。比如国内著名的黑苹果论坛——远景论坛，不过总是出现无法访问的情况。如果觉得网上搜罗的参差不齐的话，推荐到这个网站下载：<a href="https://blog.daliansky.net/">黑果小兵的部落阁</a>，本人的镜像也是从这里下载的。本人下载的镜像是：macOS High Sierra 10.13.2(17C88) Installer with Clover 4333.dmg。镜像下载好了，就应该开始制作安装U盘了，这里我只介绍在Windows下如何制作（网上也有很多制作安装U盘的教程，我就不重复造轮子了）。个人人认为最简单的一个方法就是使用TransMac这款软件，大家可以通过百度搜索下载。试用期是15天，如果你卸载重装又可以试用15天，况且我们也只是会用到一次，没必要激活。把你的U盘插在电脑上，打开TransMac，找到左侧你U盘的图标，右键，有个Format开头的选项，点击它，之后提示完成，点击OK。继续右键你的U盘，有个Restore开头的选项，点击它。之后点击框框旁边三个点，在弹出来的文件管理器窗口选中你下载的苹果镜像之后确定。然后会弹出一个进度框，这个过程比较漫长一点，具体时间要看你U盘写入的速度。当然，你可以使用USB3.0的U盘，插在USB3.0的接口，这样就会快不少。完成会有一个弹出框提示你Complete，你点击OK就是了。然后Windows会提示你格式化此U盘，记住，千万别点确定格式化，不然就白做了。这样，一个黑苹果的安装U盘就做好了。如果你是下载的带有clover的镜像，此时你的U盘里面应该有两个分区。你可以使用diskgenius这款软件查看。我下载的镜像在Windows是看不到一个叫EFI分区的。（这一步并不是本文的重点章节，所以我也只是一笔带过，如果各位有没看懂的，可以去百度搜索相关教程补补课）</p><h3 id="三，开始安装"><a href="#三，开始安装" class="headerlink" title="三，开始安装"></a>三，开始安装</h3><p>因为我下载的镜像自带了clover，所以就不用自己动手安装了。另外，我下载的镜像中还含有很多通用性配置。现在我讲把我的U盘插入前置USB接口，好的，开机，进入BIOS，选择从U盘引导启动，进入了四叶草，选择Boot Install mac OS From Install什么什么的，一个回车，纳尼？出现了一个禁止标志🚫。这个我以前是知道这个错误的，原因有很多，我就不细说。我的解决办法是把U盘插入到后置USB接口。所以我在这里建议大家，有后置USB接口就别插前置USB接口，有USB2.0接口就别插USB3.0接口。好的，这个禁止标志的问题算是解决了，但是接着又碰到一个问题，一个goIoScreenState 3什么什么的，网上一百度才知道是安装10.13这个版本要屏蔽独显，其他安装10.13会出现的一些问题可以参照右边这篇博客：<a href="https://blog.daliansky.net/macOS-10.13-installation-of-common-problems-and-solutions.html">macOS 10.13安装中常见的问题及解决方法</a>。于是乎，我就上网百度了一下华硕的主板怎么屏蔽独显，一番搜索我知道了。进入BIOS，点击高级（我的BIOS是中文的），点击系统代理设置，里面有一个显示设置，进去之后有一个首选显卡，我一个回车，出现三个选项：自动，iGPU，PICE。又是一番搜索，知道了iGPU代表的是核显，PICE代表的是独显插槽，自动就是如果你的机子没有装独显，他将启用核显，如果装了独显，那么将屏蔽核显。我选好iGPU之后，一个F10保存。卧槽？怎么黑屏了，莫慌，这个我还是有点经验的，我把连接显示器的VGA线接到主机的另一个VGA接口，那就是核显输出的接口，嗯，正常了。继续从U盘启动，进入clover，选择option，选择configs选项卡，选择了config_HD_4600_4400_4000.plist这个配置文件，是的，我的核显是4600。选好之后，return，添加好-v启动参数后继续启动安装（我选择的这个配置文件没有配置-v启动参数，我自己手动配置）。激动人心的时刻终于要到了，额，然而还是没有进去，还是出现了goIoScreenState 3什么什么的，我明明屏蔽独显了啊，配置也是根据我的硬件信息选的。但是有一点不同，我自带的那些配置文件默认是给笔记本配置的，我的是台式机，这是有区别的，比如台式机HD4600显卡和笔记本HD4600显卡platform-id这是不一样的。那好吧，索性我就暂时不注入id，不驱动我的核显。反正我有一块独显，而且独显驱动很容易。好的，再来一次，进BIOS，进clover，进option，选好config，最后进入Graphic什么什么的，也就是显卡配置的选项卡，把Inject Intel那个选项取消勾选，return，启动安装。激动人心的时刻就要到了，要进去了吗？No，现实又狠狠给了我一记耳光，还是那个错误。苍天啊，我做错了什么，你要这样对我。阴差阳错，我居然想到在显卡设置里面设置注入英伟达显卡。好的，再来一次，进BIOS，进clover，进option，选好config，最后进入Graphic什么什么的，也就是显卡配置的选项卡，把Inject Intel那个选项取消勾选，然后把Inject Nvidia给勾上，return，启动安装。yes，终于进去安装界面了。接着就是一顿操作猛如虎，很常规的操作，坐下。抹盘，给安装盘命名为Mac OS，安装，一气呵成（注意，你要安装的磁盘EFI分区要大于200M，否则会出现抹盘失败，如果想了解的更详细还请自己补课，本篇文章只是一篇心得体会）。好的，继续再来一次，不过最后一步我们选择Boot mac OS Install From Mac OS。这里的Mac OS是我抹盘时命的名字。好的，一切还算顺利，成功安装上了。他自动重启，不过我们依然还是要进去BIOS从U盘启动。好的又是把config选好，取消勾选核显注入，勾选英伟达显卡注入，然后选择Boot mac OS From Mac OS。好的，成功进去系统，一番引导配置后进入了桌面。现在测试三卡：声卡，显卡，网卡。网卡是OK的。声卡和显卡是没有驱动上的，现在用起来图形界面比较卡顿，显存只有7M，能不卡吗？核显我就不去驱动他了，直接驱动独显，下载好对应的web驱动。大家可以到这个网址下载：<a href="https://www.tonymacx86.com/nvidia-drivers/">https://www.tonymacx86.com/nvidia-drivers/</a>。可以通过我下载的镜像的镜像名称知道我的是10.13.2 17c88，也就是下图中这个：<br><img src="/images/%E8%8B%B1%E4%BC%9F%E8%BE%BEweb%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD.png" alt="英伟达web驱动下载"><br>下载好之后就是一顿操作猛如虎，把这个驱动安装好了，别说你不会，傻瓜式安装。接着就要把clover启动项放到硬盘的efi里面了。我们需要用到Clover Configurator这个软件，这个软件也可以到文章开头的那个tonymacx86下载。我们打开软件，点击Mount EFI：<br><img src="/images/%E5%88%A9%E7%94%A8%E5%9B%9B%E5%8F%B6%E8%8D%89%E9%85%8D%E7%BD%AE%E8%BD%AF%E4%BB%B6%E6%8C%82%E8%BD%BDEFI.png" alt="利用四叶草配置软件挂载EFI"><br>之后点击：<br><img src="/images/%E5%88%A9%E7%94%A8%E5%9B%9B%E5%8F%B6%E8%8D%89%E9%85%8D%E7%BD%AE%E8%BD%AF%E4%BB%B6%E6%8C%82%E8%BD%BDEFI2.png" alt="利用四叶草配置软件挂载EFI"><br>然后再点击：<br><img src="/images/%E5%88%A9%E7%94%A8%E5%9B%9B%E5%8F%B6%E8%8D%89%E9%85%8D%E7%BD%AE%E8%BD%AF%E4%BB%B6%E6%8C%82%E8%BD%BDEFI3.png" alt="利用四叶草配置软件挂载EFI"><br>之后就会弹出一个文件管理器窗口，打开EFI文件夹，把U盘中EFI分区的EFI文件夹下的CLOVER文件夹拷贝到弹出的窗口的EFI文件夹中，因为把Windows给格式化了，不然这里还会有一个MicroSoft的文件夹用来引导Windows的：<br><img src="/images/EFI%E5%88%86%E5%8C%BA%E5%86%85%E5%AE%B9.png" alt="EFI分区内容"><br>之后把这个CLOVER目录下多余的config文件删除，只留下我用到的那个config_HD4600_4400_4000.plist，并且把它更名为config.plist，这样就会默认使用这个配置文件启动黑苹果了。然后我们双击硬盘中的这个更名后的config.plist，默认会使用Clover Configurator这个软件打开，然后我们就可以进行配置了。首先我们在之前的步骤取消了核显注入，开启了英伟达注入，还添加了-v启动参数，接着我们就要在软件中进行配置。如下图：<br><img src="/images/%E6%98%BE%E5%8D%A1config.png" alt="显卡config"><br><img src="/images/%E6%B7%BB%E5%8A%A0v%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0.png" alt="添加v启动参数"></p><p>然后还有声卡的仿冒，使用AppleALC，对于这个我们主要配置：<br><img src="/images/%E5%A1%AB%E5%85%A5%E5%A3%B0%E5%8D%A1%E5%B8%83%E5%B1%80id.png" alt="填入声卡布局id"><br>在输入框中我输入的是11，这个数值该怎么填写呢？主要参考<a href="https://github.com/acidanthera/AppleALC/wiki/Supported-codecs">这里</a>。我的声卡是ALC887：<br><img src="/images/ALC887%E5%8F%AF%E9%80%89%E5%A3%B0%E5%8D%A1%E5%B8%83%E5%B1%80id.png" alt="ALC887可选声卡布局id"><br>从图中我们可以找到自己的声卡可以填写哪些数字，每个主板的音频线路都不同（不知道这样说对不对），所以才会有不同的数字对应不同的线路，我这里找了一个比较合适的数字就是11，前后面板的耳机插孔都有声音，但是麦克风好像没被驱动，暂时先这样吧，反正不用麦克风等我之后一个一个试一下（如果你不嫌烦的话，还有很强的动手能力的话，可以参考<a href="https://blog.daliansky.net/Use-AppleALC-sound-card-to-drive-the-correct-posture-of-AppleHDA.html">这篇博客</a>去驱动声卡）。</p><p>然后我们还要配置一下这台电脑的机型：<br><img src="/images/%E7%94%9F%E6%88%90%E6%9C%BA%E5%9E%8B%E6%AD%A5%E9%AA%A41.png" alt="生成机型步骤1"><br><img src="/images/%E7%94%9F%E6%88%90%E6%9C%BA%E5%9E%8B%E6%AD%A5%E9%AA%A42.png" alt="生成机型步骤2"><br><img src="/images/%E7%94%9F%E6%88%90%E6%9C%BA%E5%9E%8B%E6%AD%A5%E9%AA%A43.png" alt="生成机型步骤3"><br>最后，点击左上角的叉叉关闭，点击OK保存，好的，重启，进入BIOS，继续从U盘启动，不过我们这次移动到下面这行小图标，选择一个四叶草标志的选项进去，选择add all开头的那个选项卡，把四叶草启动项添加一下。然后关机，拔掉U盘，开机，进BIOS，把clover开头的那个启动项设置为首选项。然后继续进入高级，系统代理设置，显示设置，首选显卡调整为自动，F10保存并退出，把连接显示器的VGA线连接回独显的输出口，开机，进clover，启动Mac OS，发现又出现了goIOScreenState 3那个错误，这个错误的出现真是搞了我大半天，可能是我比较小白吧。进不去怎么办，只好继续切换成核显，进去苹果系统重新配置，最后我发现，原来是要把nv_diable这个勾选取消掉，把nvda_drv=1勾选上（据论坛说这个参数已经没有作用了，我不管那么多，为了保险起见，我还是勾上了）。<br><img src="/images/%E5%90%AF%E7%94%A8%E8%8B%B1%E4%BC%9F%E8%BE%BE%E9%A9%B1%E5%8A%A8config.png" alt="启用英伟达驱动config"><br>这个nv_diable参数是禁用英伟达驱动的，难怪驱动一直没起作用，nvda_drv=1这个参数是使用英伟达驱动的。然后关机，进BIOS，把首选显卡有调整成自动，F10保存并退出，把连接显示屏的线插回独显输出的口。开机，发现已经可以成功进入系统，并且显卡也可以驱动上：<br><img src="/images/%E6%98%BE%E5%8D%A1%E6%88%90%E5%8A%9F%E9%A9%B1%E5%8A%A8%E7%A4%BA%E4%BE%8B.png" alt="显卡成功驱动示例"><br>可以通过上图看到独显已经被成功识别了！因为一切好像都正常了，我们就没必要看开机启动日志了，那么一长串代码影响美观。我们要像白苹果那样开机只显示logo，然后我们又可以打开Clover Configurator这个软件把-v启动参数取消掉：<br><img src="/images/%E5%8F%96%E6%B6%88v%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0.png" alt="取消v启动参数"><br>最后听说黑苹果的CPU很可能不正常，可以通过CPU-S这个软件查看，我的图是下面这样，我也不知道我的正常不？各位大神帮我看看？<br><img src="/images/%E6%B5%8B%E8%AF%95CPU%E5%8F%98%E9%A2%91%E7%BB%93%E6%9E%9C.png" alt="测试CPU变频结果"></p><h3 id="2019年01月06日更新"><a href="#2019年01月06日更新" class="headerlink" title="2019年01月06日更新"></a>2019年01月06日更新</h3><p>GT730 是免驱卡，也就是说不需要英伟达的WebDriver就可以驱动上</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;其实一直想在苹果上做开发的，可是面对苹果硬件高昂的价格，我这个小穷逼只能望而却步，便产生了自己装黑苹果的念头。其实黑苹果我好早就接触过，但是是给我笔记本装的，还是用别人配置好的，装起来就像装白果那么简单。我还没自己尝试过自己配置呢，所以才有了这次在台式机上的安装的一次新的体会。请注意，本篇文章并不是教程，更多的是一篇心得体会。另外要说一下，台式机黑苹果是比笔记本要简单的，特别是你使用了能很好兼容的硬件。&lt;/p&gt;</summary>
    
    
    
    <category term="黑苹果" scheme="https://www.cyixlq.top/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
    
    <category term="黑苹果" scheme="https://www.cyixlq.top/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
    <category term="安装" scheme="https://www.cyixlq.top/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Android MVVM探索(三) - ViewModel，DataBinding，LiveData混合三打</title>
    <link href="https://www.cyixlq.top/2018/10/29/MVVM3/"/>
    <id>https://www.cyixlq.top/2018/10/29/MVVM3/</id>
    <published>2018-10-29T09:07:44.000Z</published>
    <updated>2021-01-15T08:30:39.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="之前几小章我们讲了DataBinding，其中将一个普通类化身为ViewModel，但是以我的观点来看，他仅仅只是一个普通类，一个将各种可观察属性封装起来的普通类，而这个普通类我们还在里面定义了各种相应按钮点击事件等方法，其实这些都违背了官方的建议的，我只是想让大家知道可以这样做而已。所以我们要介绍Android-Jetpack中正统的ViewModel类，以及一些它的最佳实践指南。"><a href="#之前几小章我们讲了DataBinding，其中将一个普通类化身为ViewModel，但是以我的观点来看，他仅仅只是一个普通类，一个将各种可观察属性封装起来的普通类，而这个普通类我们还在里面定义了各种相应按钮点击事件等方法，其实这些都违背了官方的建议的，我只是想让大家知道可以这样做而已。所以我们要介绍Android-Jetpack中正统的ViewModel类，以及一些它的最佳实践指南。" class="headerlink" title="之前几小章我们讲了DataBinding，其中将一个普通类化身为ViewModel，但是以我的观点来看，他仅仅只是一个普通类，一个将各种可观察属性封装起来的普通类，而这个普通类我们还在里面定义了各种相应按钮点击事件等方法，其实这些都违背了官方的建议的，我只是想让大家知道可以这样做而已。所以我们要介绍Android Jetpack中正统的ViewModel类，以及一些它的最佳实践指南。"></a>之前几小章我们讲了DataBinding，其中将一个普通类化身为ViewModel，但是以我的观点来看，他仅仅只是一个普通类，一个将各种可观察属性封装起来的普通类，而这个普通类我们还在里面定义了各种相应按钮点击事件等方法，其实这些都违背了官方的建议的，我只是想让大家知道可以这样做而已。所以我们要介绍Android Jetpack中正统的ViewModel类，以及一些它的最佳实践指南。</h3><p><a href="https://github.com/cyixlq/MVVMTest">本篇文章代码地址</a></p><p><a href="https://www.bilibili.com/video/av29949898">官方中文教学视频地址</a></p><span id="more"></span><h2 id="Android-MVVM探索系列"><a href="#Android-MVVM探索系列" class="headerlink" title="Android MVVM探索系列"></a>Android MVVM探索系列</h2><p><a href="https://juejin.im/post/5bcdd069f265da0a96250bea">Android MVVM探索(一) - DataBiding初解</a></p><p><a href="https://juejin.im/post/5bcdd0aff265da0abc2ba235">Android MVVM探索(二) - DataBiding常用注解</a></p><p><a href="https://juejin.im/post/5bd6acd1e51d457a976637c3">Android MVVM探索(三) - ViewModel，DataBinding，LiveData混合三打</a></p><h3 id="Android-Jetpack是谷歌为了帮助开发者们更快更高效地开发安卓应用而推出来的一套组件。Android-Jetpack包含了开发库，工具以及最佳实践指南。而我们今天要讲的ViewModel类是属于Android-Jetpack库中的lifecycle库。说到这，顺带解释以下。lifecycle，中文意思为生命周期。所以这个库的存在就跟它的中文含义一样，它可以有效避免内存泄漏和解决Android常见的生命周期难题。（如果各位看官不知道内存泄露的可以去好好补补课）lifecycle最近发布了2-0版本，在这个版本中，可以结合DataBinding进行使用，那可以说是方便太多了。"><a href="#Android-Jetpack是谷歌为了帮助开发者们更快更高效地开发安卓应用而推出来的一套组件。Android-Jetpack包含了开发库，工具以及最佳实践指南。而我们今天要讲的ViewModel类是属于Android-Jetpack库中的lifecycle库。说到这，顺带解释以下。lifecycle，中文意思为生命周期。所以这个库的存在就跟它的中文含义一样，它可以有效避免内存泄漏和解决Android常见的生命周期难题。（如果各位看官不知道内存泄露的可以去好好补补课）lifecycle最近发布了2-0版本，在这个版本中，可以结合DataBinding进行使用，那可以说是方便太多了。" class="headerlink" title="Android Jetpack是谷歌为了帮助开发者们更快更高效地开发安卓应用而推出来的一套组件。Android Jetpack包含了开发库，工具以及最佳实践指南。而我们今天要讲的ViewModel类是属于Android Jetpack库中的lifecycle库。说到这，顺带解释以下。lifecycle，中文意思为生命周期。所以这个库的存在就跟它的中文含义一样，它可以有效避免内存泄漏和解决Android常见的生命周期难题。（如果各位看官不知道内存泄露的可以去好好补补课）lifecycle最近发布了2.0版本，在这个版本中，可以结合DataBinding进行使用，那可以说是方便太多了。"></a>Android Jetpack是谷歌为了帮助开发者们更快更高效地开发安卓应用而推出来的一套组件。Android Jetpack包含了开发库，工具以及最佳实践指南。而我们今天要讲的ViewModel类是属于Android Jetpack库中的lifecycle库。说到这，顺带解释以下。lifecycle，中文意思为生命周期。所以这个库的存在就跟它的中文含义一样，它可以有效避免内存泄漏和解决Android常见的生命周期难题。（如果各位看官不知道内存泄露的可以去好好补补课）lifecycle最近发布了2.0版本，在这个版本中，可以结合DataBinding进行使用，那可以说是方便太多了。</h3><h4 id="一，ViewModel的定义。"><a href="#一，ViewModel的定义。" class="headerlink" title="一，ViewModel的定义。"></a>一，ViewModel的定义。</h4><p>来自官方的解释：ViewModel类是用来保存UI数据的类，它会在配置变更（即 Configuration Change，例如手机屏幕的旋转）之后继续存在。</p><h4 id="二，它的一些特点。"><a href="#二，它的一些特点。" class="headerlink" title="二，它的一些特点。"></a>二，它的一些特点。</h4><p>我们都知道，当手机屏幕发生旋转的时候，Activity会被重新创建，也就是说生命周期又将从onCreate开始，如果你此时不及时保存，那么一些UI数据将会丢失，这样肯定是会出问题的。但是，ViewModel并不会受此影响，即便手机屏幕发生旋转，ViewModel依然存在，这样的话Activity的UI数据便可以保存下来。</p><h4 id="三，最佳实践（官方推荐做法）。"><a href="#三，最佳实践（官方推荐做法）。" class="headerlink" title="三，最佳实践（官方推荐做法）。"></a>三，最佳实践（官方推荐做法）。</h4><ol><li><p>所有Activity的UI相关数据应该保存在ViewModel中，而不是保存在Activity中。这样做的好处是，在配置变更的时候，你应用的UI数据仍然存在。即使ViewModel这么强大，但它也不应该不承担过多责任，当有UI数据处理等相关事件建议创建Presenter类，或者创建一个更成熟的架构。</p></li><li><p>Activity负责展示UI数据，并接收互动（一般来说是与用户的互动）。但是Activity不应当处理这些互动。</p></li><li><p>在应用需要加载数据或者保存数据的时候，建议创建一个Repository的存储区类，里面放置存储与加载应用数据的API。</p></li><li><p>ViewModel不应持有Context，就像之前说的：</p><blockquote><p>它会在配置变更（即 Configuration Change，例如手机屏幕的旋转）之后继续存在。</p></blockquote><p> 所以，ViewModel生命周期远比Activity，Fragment等生命周期更长，具体如下图所示。如果你这样做了，加入在屏幕旋转情况下，原Activity将会销毁，新的Activity将会被创建。而ViewModel会一直持有原Activity，这样便会造成内存泄漏。如果你的ViewModel确实需要Context，那么你的ViewModel可以继承AndroidViewModel，这样你的ViewModel中会有Application的引用。<br><br> <img src="https://upload-images.jianshu.io/upload_images/8654767-3367001936c06aac.png" alt="ViewModel配置变更的生命周期"></p></li><li><p>ViewModel不应当取代onSaveInstanceState方法。尽管ViewModel很出色了，但是它和onSaveInstanceState依然是相辅相成的作用。因为，当进程被关闭时，ViewModel将会被销毁，但是onSaveInstanceState不会受到影响。（个人猜想：比如在后台内存紧张情况下，你的应用处于后台被系统释放了，ViewModel会被销毁，但是你通过onSaveInstanceState存储下来的数据在你的应用重新回到前台时仍然可以被恢复）<br> <img src="https://upload-images.jianshu.io/upload_images/8654767-0a4131db00ef8d7d.png" alt="QQ截图20181029143111.png"></p></li><li><p>ViewModel与Activity生命周期对比图：<br> <img src="https://upload-images.jianshu.io/upload_images/8654767-b7cb23337850512e.png" alt="ViewModel与Activity生命周期对比图"></p></li></ol><h4 id="四，ViewModel的用法"><a href="#四，ViewModel的用法" class="headerlink" title="四，ViewModel的用法"></a>四，ViewModel的用法</h4><ol><li><p>引入lifecycle库：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation &quot;android.arch.lifecycle:extensions:1.1.0&quot;</span><br><span class="line">annotationProcessor &quot;android.arch.lifecycle:compiler:1.1.0&quot;</span><br></pre></td></tr></table></figure></li><li><p>首先创建出我们的ViewModel类。我们需要新建一个普通类，（虽然类名是随意的，但是作为一名合格的程序员，我们取得每一个名字要具有规范性，要让代码阅读者一看名字就知道这个类或者这个变量是干嘛的）让它继承ViewModel类，并且在其中存放UI相关数据：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 假设我们要存放的UI数据就是User对象</span><br><span class="line">&#x2F;&#x2F; 先新建一个实体对象</span><br><span class="line">data class User(val name: String, val age: Int, val sex: Int)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 新建ViewModel类</span><br><span class="line">&#x2F;&#x2F; 新建ViewModel类</span><br><span class="line">class UserViewModel : ViewModel() &#123;</span><br><span class="line">    val user &#x3D; User(&quot;张三&quot;, 21, 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建Activity，并且加入实例化ViewModel的代码。这里我们实例化ViewModel不再是new一下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class ViewModelActivity : AppCompatActivity() &#123;</span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_view_model)</span><br><span class="line">        val userViewModel &#x3D; ViewModelProviders.of(this).get(UserViewModel::class.java)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 至此，我们一个ViewModel就创建好了。</p></li><li><p>感觉单单一个ViewModel的存在没有很大的价值，但是如果搭配上LiveData和DataBinding你就能体会到什么是飞一样的感觉。用上这些，你就能够创建反应式界面（最基本的只要LiveData和ViewModel就可以创建反应式界面。或者单单DataBinding就可以完成，但是不具备生命周期感知能力，我们需要手动处理生命周期问题）。也就是说，当你底层数据发生变动时（这里暂时只是ViewModel中数据发生变动），UI会自动刷新。</p></li><li><p>ViewModel只提供一个默认的无参构造函数，如果你需要一个有参构造函数，那么就需要使用ViewModelFactory这个类，具体使用方法如下所示(摘自官方sunflower Demo代码)：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 新建一个Factory类，用来提供带有有参构造函数的ViewModel实例，必须继承ViewModelProvider.NewInstanceFactory，然后重写create方法</span><br><span class="line">class MessageViewModelFactory(private val message: Message) : ViewModelProvider.NewInstanceFactory() &#123;</span><br><span class="line">    @Suppress(&quot;UNCHECKED_CAST&quot;)</span><br><span class="line">    override fun &lt;T : ViewModel?&gt; create(modelClass: Class&lt;T&gt;): T &#123;</span><br><span class="line">        return MessageViewModel(message) as T</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 新建一个带有有参构造函数的ViewModel</span><br><span class="line">class MessageViewModel(val message: Message) : ViewModel()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Activity中初始化ViewModel的代码也要进行改动</span><br><span class="line">&#x2F;&#x2F; 创建Factory对象</span><br><span class="line">val factory &#x3D; MessageViewModelFactory(Message(&quot;我是通过有参构造函数直接初始化的信息内容&quot;,</span><br><span class="line">        &quot;我是通过有参构造函数直接构造出来的信息发送人&quot;))</span><br><span class="line">&#x2F;&#x2F; 通过Factory对象初始化带参构造函数的ViewModel</span><br><span class="line">val messageViewModel &#x3D; ViewModelProviders.of(this, factory).get(MessageViewModel::class.java)</span><br><span class="line">&#x2F;&#x2F; 将MessageViewModel实例赋值给xml中的msg</span><br><span class="line">binding.msg &#x3D; messageViewModel</span><br></pre></td></tr></table></figure><p> 这样便可以完成带有有参构造函数的ViewModel的初始化。</p></li></ol><h4 id="五，搭配上LiveData"><a href="#五，搭配上LiveData" class="headerlink" title="五，搭配上LiveData"></a>五，搭配上LiveData</h4><ol><li><p>LiveData简介：LiveData是一种具有生命周期感知能力的可观察数据持有类。它同属于Android Jectpack中的lifecycle库。LiveData对象通常保存在我们上面讲的ViewModel中。</p></li><li><p>结合ViewModel的使用。我们说过，使用LiveData加ViewModel可以创建一个反应式界面，那么我们应该怎么做呢？我们需要改写上面的UserViewModel，让其中的user具有可观察性：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class UserViewModel : ViewModel() &#123;</span><br><span class="line">    val user &#x3D; MutableLiveData&lt;User&gt;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接着，我们在ViewModelActivity中监听UserViewModel中的user属性的变化，并且在它变化后进行相应的操作：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 为了演示效果，我们在布局文件activity_view_model中添加了一些控件 --&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.viewmodel.ViewModelActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;tv_vm&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;bt_vm&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;设置姓名&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在Activity中设置数据变化监听，并且进行相应处理</span><br><span class="line">class ViewModelActivity : AppCompatActivity() &#123;</span><br><span class="line">    private lateinit var tv: TextView</span><br><span class="line">    private lateinit var bt: Button</span><br><span class="line"></span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_view_model)</span><br><span class="line">        tv &#x3D; findViewById(R.id.tv_vm)</span><br><span class="line">        bt &#x3D; findViewById(R.id.bt_vm)</span><br><span class="line">        val userViewModel &#x3D; ViewModelProviders.of(this).get(UserViewModel::class.java)</span><br><span class="line">        &#x2F;&#x2F; 监听ViewModel中user的变化，当它变化时，将TextView重新设置文字</span><br><span class="line">        userViewModel.user.observe(this, Observer &#123;</span><br><span class="line">            tv.text &#x3D; it?.name</span><br><span class="line">        &#125;)</span><br><span class="line">        &#x2F;&#x2F; 为按钮设置点击事件，点击后设置user的值</span><br><span class="line">        bt.setOnClickListener&#123;</span><br><span class="line">            val user &#x3D; User(&quot;张三&quot;, 21, 1)</span><br><span class="line">            userViewModel.user.value &#x3D; user</span><br><span class="line">            &#x2F;&#x2F; Java代码</span><br><span class="line">            &#x2F;&#x2F; userViewModel.user.setValue(user)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 写完以上代码，当我们点击按钮的时候TextView就会显示“张三”二字了。</p></li><li><p>上面代码中除了setValue，还有一个方法叫postValue。区别在于setValue只可以在主线程执行（即UI线程），postValue只可以在后台线程运行。</p></li><li><p>LiveData能够感知生命周期的好处：1，当Activity不在屏幕上时（不可见），LiveData不会出发没必要的界面更新；2，当Activity被销毁时，LiveData将自动清空与Observer的连接；</p></li></ol><h4 id="六，搭配上DataBinding"><a href="#六，搭配上DataBinding" class="headerlink" title="六，搭配上DataBinding"></a>六，搭配上DataBinding</h4><p>我们看到，上面的代码还是有些繁琐，我们还要自己写代码监听数据变化，并且自己手动去更新UI。之前我们DataBinding可不是这样的。是的，我们还可以更简单。别忘了，lifecycle2.0是支持了DataBinding数据绑定的。我们可以通过以下步骤来结合DataBinding使用：</p><ol><li><p>像DataBinding中那样写布局，所以将activity_view_model改成如下所示：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;layout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;&gt;</span><br><span class="line">    &lt;data&gt;</span><br><span class="line">        &lt;variable</span><br><span class="line">            name&#x3D;&quot;viewModel&quot;</span><br><span class="line">            type&#x3D;&quot;top.cyixlq.test.viewmodel.UserViewModel&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;data&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;vertical&quot;</span><br><span class="line">        tools:context&#x3D;&quot;.viewmodel.ViewModelActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;tv_vm&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:text&#x3D;&quot;@&#123;viewModel.user.name&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:text&#x3D;&quot;@&#123;String.valueOf(viewModel.user.age)&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;bt_vm&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:text&#x3D;&quot;设置姓名&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line">&lt;&#x2F;layout&gt;</span><br></pre></td></tr></table></figure></li><li><p>注释掉ViewModelActivity中的之前的代码，并重新写，所以有用的代码就是下面这样：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class ViewModelActivity : AppCompatActivity() &#123;</span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_view_model)</span><br><span class="line">        val userViewModel &#x3D; ViewModelProviders.of(this).get(UserViewModel::class.java)</span><br><span class="line">        val binding &#x3D; DataBindingUtil.setContentView&lt;ActivityViewModelBinding&gt;(this, R.layout.activity_view_model)</span><br><span class="line">        &#x2F;&#x2F; Java代码</span><br><span class="line">        &#x2F;&#x2F; ActivityViewModelBinding binding &#x3D; DataBindingUtil.setContentView(this, R.layout.activity_view_model)</span><br><span class="line"></span><br><span class="line">        binding.viewModel &#x3D; userViewModel</span><br><span class="line">        &#x2F;&#x2F; java代码</span><br><span class="line">        &#x2F;&#x2F; binding.setViewModel(userViewModel)</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 让xml内绑定的LiveData和Observer建立连接，也正是因为这段代码，让LiveData能感知Activity的生命周期</span><br><span class="line">        binding.setLifecycleOwner(this)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为了验证效果，我们设置一下按钮的的点击事件，当按钮点击后TextView显示姓名年龄的信息：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bt_vm.setOnClickListener &#123; </span><br><span class="line">    userViewModel.user.value &#x3D; User(&quot;李四&quot;, 22, 1)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; java代码</span><br><span class="line">&#x2F;&#x2F; findViewById(R.id.bt_vm).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">&#x2F;&#x2F;     userViewModel.user.setValue(new User(&quot;李四&quot;, 22, 1))</span><br><span class="line">&#x2F;&#x2F; &#125;)</span><br></pre></td></tr></table></figure></li></ol><p>经过以上的步骤就可以结合DataBinding使用了</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;之前几小章我们讲了DataBinding，其中将一个普通类化身为ViewModel，但是以我的观点来看，他仅仅只是一个普通类，一个将各种可观察属性封装起来的普通类，而这个普通类我们还在里面定义了各种相应按钮点击事件等方法，其实这些都违背了官方的建议的，我只是想让大家知道可以这样做而已。所以我们要介绍Android-Jetpack中正统的ViewModel类，以及一些它的最佳实践指南。&quot;&gt;&lt;a href=&quot;#之前几小章我们讲了DataBinding，其中将一个普通类化身为ViewModel，但是以我的观点来看，他仅仅只是一个普通类，一个将各种可观察属性封装起来的普通类，而这个普通类我们还在里面定义了各种相应按钮点击事件等方法，其实这些都违背了官方的建议的，我只是想让大家知道可以这样做而已。所以我们要介绍Android-Jetpack中正统的ViewModel类，以及一些它的最佳实践指南。&quot; class=&quot;headerlink&quot; title=&quot;之前几小章我们讲了DataBinding，其中将一个普通类化身为ViewModel，但是以我的观点来看，他仅仅只是一个普通类，一个将各种可观察属性封装起来的普通类，而这个普通类我们还在里面定义了各种相应按钮点击事件等方法，其实这些都违背了官方的建议的，我只是想让大家知道可以这样做而已。所以我们要介绍Android Jetpack中正统的ViewModel类，以及一些它的最佳实践指南。&quot;&gt;&lt;/a&gt;之前几小章我们讲了DataBinding，其中将一个普通类化身为ViewModel，但是以我的观点来看，他仅仅只是一个普通类，一个将各种可观察属性封装起来的普通类，而这个普通类我们还在里面定义了各种相应按钮点击事件等方法，其实这些都违背了官方的建议的，我只是想让大家知道可以这样做而已。所以我们要介绍Android Jetpack中正统的ViewModel类，以及一些它的最佳实践指南。&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cyixlq/MVVMTest&quot;&gt;本篇文章代码地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av29949898&quot;&gt;官方中文教学视频地址&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.cyixlq.top/categories/Android/"/>
    
    
    <category term="MVVM" scheme="https://www.cyixlq.top/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>Android MVVM探索(二) - DataBiding常用注解</title>
    <link href="https://www.cyixlq.top/2018/10/23/MVVM2/"/>
    <id>https://www.cyixlq.top/2018/10/23/MVVM2/</id>
    <published>2018-10-22T16:32:38.000Z</published>
    <updated>2021-01-15T08:30:39.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本来想直接一章节大致讲讲完DataBinding的，但是要知道，DataBinding知识点还是蛮多的（我也还没全部了解完）。加上我又喜欢写的细一点，所以一篇写下来洋洋洒洒一长篇，所以还是分开来写吧！今天（好吧，其实和上一篇是同一天）我们要说的DataBinding常用的一些注解！"><a href="#本来想直接一章节大致讲讲完DataBinding的，但是要知道，DataBinding知识点还是蛮多的（我也还没全部了解完）。加上我又喜欢写的细一点，所以一篇写下来洋洋洒洒一长篇，所以还是分开来写吧！今天（好吧，其实和上一篇是同一天）我们要说的DataBinding常用的一些注解！" class="headerlink" title="本来想直接一章节大致讲讲完DataBinding的，但是要知道，DataBinding知识点还是蛮多的（我也还没全部了解完）。加上我又喜欢写的细一点，所以一篇写下来洋洋洒洒一长篇，所以还是分开来写吧！今天（好吧，其实和上一篇是同一天）我们要说的DataBinding常用的一些注解！"></a>本来想直接一章节大致讲讲完DataBinding的，但是要知道，DataBinding知识点还是蛮多的（我也还没全部了解完）。加上我又喜欢写的细一点，所以一篇写下来洋洋洒洒一长篇，所以还是分开来写吧！今天（好吧，其实和上一篇是同一天）我们要说的DataBinding常用的一些注解！</h3><p><a href="https://github.com/cyixlq/MVVMTest">本篇文章代码地址</a></p><span id="more"></span><h2 id="Android-MVVM探索系列"><a href="#Android-MVVM探索系列" class="headerlink" title="Android MVVM探索系列"></a>Android MVVM探索系列</h2><p><a href="https://cyixlq.top/2018/10/22/MVVM1/">Android MVVM探索(一) - DataBiding初解</a></p><p><a href="https://cyixlq.top/2018/10/23/MVVM2/">Android MVVM探索(二) - DataBiding常用注解</a></p><p><a href="https://cyixlq.top/2018/10/29/MVVM3/">Android MVVM探索(三) - ViewModel，DataBinding，LiveData混合三打</a></p><h3 id="6，-一些常用注解说明"><a href="#6，-一些常用注解说明" class="headerlink" title="6， 一些常用注解说明"></a>6， 一些常用注解说明</h3><ul><li><p>@BidingAdapter</p><p>  在xml文件中，总是有些控件的属性不够我们用，比如我们有一张图片的网络地址，我们想直接在xml中将地址绑定到ImageView，让它显示这张图片，很明显的ImageView自带的属性明显不能完成我们的要求。那怎么办呢？我们需要拓展属性！<br>  首先我们新建一个名为ViewBindingAdapters的Kotlin文件，（如果是Java请新建一个普通类，类名随意），内容如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package top.cyixlq.test</span><br><span class="line"></span><br><span class="line">import android.databinding.BindingAdapter</span><br><span class="line">import android.widget.ImageView</span><br><span class="line">import com.bumptech.glide.Glide</span><br><span class="line"></span><br><span class="line">@BindingAdapter(&quot;imgUrl&quot;)</span><br><span class="line">fun setImgUrl(view: ImageView, url: String) &#123;</span><br><span class="line">    Glide.with(view).load(url).into(view)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Java如下：</span><br><span class="line">public class ViewBindingAdapters &#123;</span><br><span class="line">    @BindingAdapter(&quot;imgUrl&quot;)</span><br><span class="line">    public static void setImgUrl(ImageView view, String url) &#123;</span><br><span class="line">        Glide.with(view).load(url).into(view)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  可以看到，我们使用了Glide，所以需要在app的build.gradle文件中dependencies下加入(我写这篇文章时，最新的Glide版本为4.8.0):</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation &#39;com.github.bumptech.glide:glide:4.8.0&#39;</span><br><span class="line">annotationProcessor &#39;com.github.bumptech.glide:compiler:4.8.0&#39;</span><br></pre></td></tr></table></figure><p>  我们需要在网上找了一张图片的链接，并且把它加入到MainViewModel的属性中:</p><blockquote><p>val imgUrl = “这里是图片地址，地址太长，我就不贴在这里”</p></blockquote><p>  我们在activity_main.xml文件中加入一个ImageView，并使用我们拓展的属性：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ImageView</span><br><span class="line">    android:layout_width&#x3D;&quot;80dp&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;80dp&quot;</span><br><span class="line">    imgUrl&#x3D;&quot;@&#123;viewModel.imgUrl&#125;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>  最后别忘了在manifest中添加网络权限：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.INTERNET&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>  那么，这个注解是如何判断是给哪个控件添加的拓展属性呢？请看本小节开头我们创建的那个Kotlin文件的内容，我们用@BindingAdapter注解修饰了一个setImgUrl的方法，注解中包含一个字符串“imgUrl”。方法的第一个形参的类型是ImageView，所以，这个注解是通过第一个形参的类型来判断拓展的是哪个控件的属性，第一个形参也是设置了该拓展属性的控件的实例。第二个形参传进来的是一个String类型的值，也就是在xml布局文件中传进来的viewModel.imgUrl，然后我们在方法体中进行一下处理即可实现自动加载网络图片了！</p><p>  @BindingAdapter注解需要传入的第一个参数是字符串数组。如果你只想拓展一个属性，那么只传一个字符串就行。如果你想拓展多个属性，那么你就需要传入一个字符串数组，一个字符串就代表一个拓展属性。当数组长度大于一时，我们就需要设置它的第二个参数，requireAll（中文意思：全部必须）。这个参数为布尔型。当为true时(默认就是为true)，就像他的中文意思一样，全部需要，代表你传入的第一个参数，字符串数组的拓展属性必须在一个控件上全部要设置，否则的话你想设置哪个拓展属性就设置哪个拓展属性！示例代码如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 当为false时</span><br><span class="line">@BindingAdapter(value &#x3D; [&quot;imgUrl&quot;, &quot;bgRes&quot;], requireAll &#x3D; false)</span><br><span class="line">fun setImgUrl(view: ImageView, url: String, res: Int) &#123;</span><br><span class="line">    Glide.with(view).load(url).into(view)</span><br><span class="line">    view.setBackgroundResource(res)</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- xml文件代码 --&gt;</span><br><span class="line">&lt;ImageView</span><br><span class="line">    android:layout_width&#x3D;&quot;80dp&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;80dp&quot;</span><br><span class="line">    imgUrl&#x3D;&quot;@&#123;viewModel.imgUrl&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 当为true时</span><br><span class="line">@BindingAdapter(value &#x3D; [&quot;imgUrl&quot;, &quot;bgRes&quot;], requireAll &#x3D; true)</span><br><span class="line">fun setImgUrl(view: ImageView, url: String, res: Int) &#123;</span><br><span class="line">    Glide.with(view).load(url).into(view)</span><br><span class="line">    view.setBackgroundResource(res)</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- xml文件代码 --&gt;</span><br><span class="line">&lt;!-- 这段请放在data标签中 --&gt;</span><br><span class="line">&lt;import type&#x3D;&quot;top.cyixlq.test.R&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;ImageView</span><br><span class="line">    android:layout_width&#x3D;&quot;80dp&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;80dp&quot;</span><br><span class="line">    imgUrl&#x3D;&quot;@&#123;viewModel.imgUrl&#125;&quot;</span><br><span class="line">    bgRes&#x3D;&quot;@&#123;R.mipmap.ic_launcher&#125;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>  如果第二个参数设置为true但是在xml中有没有将全部的拓展属性设置好的话在编译的时候就会报错：</p><blockquote><p>Found data binding errors.</p></blockquote><p>  补充一下，传入的属性值前面可以加上命名空间，就像下面那样（命名空间有一定规范,最好是英文单词）：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@BindingAdapter(value &#x3D; [&quot;app:imgUrl&quot;, &quot;app:bgRes&quot;], requireAll &#x3D; true)</span><br><span class="line">fun setImgUrl(view: ImageView, url: String, res: Int) &#123;</span><br><span class="line">    Glide.with(view).load(url).into(view)</span><br><span class="line">    view.setBackgroundResource(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  如果你加入了命名空间，相应的你也需要在xml布局文件中引入命名空间并且加上去，就像下面那样:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入app命名空间 --&gt;</span><br><span class="line">&lt;layout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 控件相应属性加上命名空间 --&gt;</span><br><span class="line">&lt;ImageView</span><br><span class="line">    android:layout_width&#x3D;&quot;80dp&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;80dp&quot;</span><br><span class="line">    imgUrl&#x3D;&quot;@&#123;viewModel.imgUrl&#125;&quot;</span><br><span class="line">    app:bgRes&#x3D;&quot;@&#123;R.mipmap.ic_launcher&#125;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>  最后看看这个注解的源代码，更方便理解：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">public @interface BindingAdapter &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">    boolean requireAll() default true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@BindingConversion</p><p>  这个注解的作用就是将不符合某个控件属性的值的类型转换成符合的类型。举个例子：TextView的text属性是需要String类型的，假如我们传入时间戳(Long类型)很明显是不行的，但是我就是不想自己每个都自己手动转换一下，怎么办？那么这个注解就派上用场了。我们直接上代码，就以TextView这个例子来说明：</p><p>  1.我们新建一个Kotlin文件，文件名为ViewBindingConversions，文件内容如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SuppressLint(&quot;SimpleDateFormat&quot;)</span><br><span class="line">@BindingConversion</span><br><span class="line">fun convertIntToString(value: Long): String &#123;</span><br><span class="line">    val formatter &#x3D; SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">    return formatter.format(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>把我们之前布局文件中新加入一个TextView，就像下面的代码，之后编译运行，我们发现可以正常运行。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:text&#x3D;&quot;@&#123;System.currentTimeMillis()&#125;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>值得注意的是，这个注解，声明一个，所有控件都会自动转换。也就是说我们上面的那个方法，凡是某个属性需要String类型的，如果你传入了Long，它就会通过方法体中的代码进行转换，最后填充的属性值就是返回的结果。加入Button的text你也传入了Long，那么也会进行转换，并不只限于TextView。用这个注解修饰的方法只有一个形参，它的类型代表是xml中传进来的值的类型，最后函数必须要一个返回值，返回匹配控件支持的值得类型。所以感觉就是这个注解用起来不会太灵活！</li></ol></li><li><p>@InverseMethod</p><p>  在开发中，我们经常遇到某个字符串，或者某个数字代表某种状态。比如0代表女孩子，1代表男孩子。但是用户选好男还是女之后，我们回传到后台的数据应该是0或1，但是我们不想手动转换怎么办，那就用这个注解。这个注解的作用和上面那个注解@BindingConversion有点类似，但是不同的是，这个可以具体作用到某个控件实例上，还有双向绑定的作用。如果不知道双向绑定是什么意思，请参照上一小章节。首先还是新建一个Kotlin文件，文件名为：ViewInverseMethods，Java的话还是和上面一样新建一个类，类名随意。文件内容如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 这个注解参数为反转的方法名，意味着一个这个注解需要两个方法才能完成</span><br><span class="line">@InverseMethod(&quot;sexToNum&quot;)</span><br><span class="line">fun numToSex(num: Int): String &#123;</span><br><span class="line">    return when (num) &#123;</span><br><span class="line">        0 -&gt; &quot;女&quot;</span><br><span class="line">        1 -&gt; &quot;男&quot;</span><br><span class="line">        else -&gt; &quot;未知性别&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun sexToNum(sex: String): Int &#123;</span><br><span class="line">    return when(sex) &#123;</span><br><span class="line">        &quot;女&quot; -&gt; 0</span><br><span class="line">        &quot;男&quot; -&gt; 1</span><br><span class="line">        else -&gt; 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  是的，因为这个注解设计到双向绑定，有转换过去的方法肯定,肯定就有转换回来的方法。我们在MainViewModel中添加属性：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 因为涉及双向绑定，这里必须是可观察的数据类型</span><br><span class="line">val num &#x3D; ObservableInt(1)</span><br></pre></td></tr></table></figure><p>  在布局文件中添加一个TextView和一个EditText，TextView用来观察num这个值的变化，EditText用来展示转换好之后的数据：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 这里别忘了导入，导入了下面的EditText才能用这个类 --&gt;</span><br><span class="line">&lt;import type&#x3D;&quot;top.cyixlq.test.ViewInverseMethodsKt&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:text&#x3D;&quot;@&#123;String.valueOf(viewModel.num)&#125;&quot;&#x2F;&gt;</span><br><span class="line">&lt;EditText</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:text&#x3D;&quot;@&#x3D;&#123;ViewInverseMethodsKt.numToSex(viewModel.num)&#125;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>  这时候编译运行，EditText直接显示了男，如果我们删除男，EditText立马显示了未知性别。因为空字符串会对应到sexToNum中的else，所以num的值瞬间变成2，而2又对应numToSex中的else，所以EditText就会显示未知性别。当我们把未知性别几个字全部删除，输入1，或者2也好，num都是2，因为字符串-“1”,字符串-“2”都是对应sexToNum方法中的else。但是如果我们在输入框中输入男，num就变成1了，输入女num就变成0了。其中的过程我就不继续详细解释了。下面贴出一张动态图：<br>  <img src="https://upload-images.jianshu.io/upload_images/8654767-386d9ceaa25b82d8.gif?imageMogr2/auto-orient/strip" alt="InverseMethod注解详解动图.gif"></p></li></ul><h3 id="暂时我就用到这么些注解，我认为比较常用的。其他注解我在下面贴上链接，大家可以去看看。另外本章节中出现的问题还望大家留言指正，毕竟还是在MVVM探索道路中！"><a href="#暂时我就用到这么些注解，我认为比较常用的。其他注解我在下面贴上链接，大家可以去看看。另外本章节中出现的问题还望大家留言指正，毕竟还是在MVVM探索道路中！" class="headerlink" title="暂时我就用到这么些注解，我认为比较常用的。其他注解我在下面贴上链接，大家可以去看看。另外本章节中出现的问题还望大家留言指正，毕竟还是在MVVM探索道路中！"></a>暂时我就用到这么些注解，我认为比较常用的。其他注解我在下面贴上链接，大家可以去看看。另外本章节中出现的问题还望大家留言指正，毕竟还是在MVVM探索道路中！</h3><p><a href="https://blog.csdn.net/qiang_xi/article/details/75379321">DataBinding使用教程（三）：各个注解详解</a></p><p><a href="https://upload-images.jianshu.io/upload_images/8654767-386d9ceaa25b82d8.gif">DataBinding最全使用说明</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;本来想直接一章节大致讲讲完DataBinding的，但是要知道，DataBinding知识点还是蛮多的（我也还没全部了解完）。加上我又喜欢写的细一点，所以一篇写下来洋洋洒洒一长篇，所以还是分开来写吧！今天（好吧，其实和上一篇是同一天）我们要说的DataBinding常用的一些注解！&quot;&gt;&lt;a href=&quot;#本来想直接一章节大致讲讲完DataBinding的，但是要知道，DataBinding知识点还是蛮多的（我也还没全部了解完）。加上我又喜欢写的细一点，所以一篇写下来洋洋洒洒一长篇，所以还是分开来写吧！今天（好吧，其实和上一篇是同一天）我们要说的DataBinding常用的一些注解！&quot; class=&quot;headerlink&quot; title=&quot;本来想直接一章节大致讲讲完DataBinding的，但是要知道，DataBinding知识点还是蛮多的（我也还没全部了解完）。加上我又喜欢写的细一点，所以一篇写下来洋洋洒洒一长篇，所以还是分开来写吧！今天（好吧，其实和上一篇是同一天）我们要说的DataBinding常用的一些注解！&quot;&gt;&lt;/a&gt;本来想直接一章节大致讲讲完DataBinding的，但是要知道，DataBinding知识点还是蛮多的（我也还没全部了解完）。加上我又喜欢写的细一点，所以一篇写下来洋洋洒洒一长篇，所以还是分开来写吧！今天（好吧，其实和上一篇是同一天）我们要说的DataBinding常用的一些注解！&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cyixlq/MVVMTest&quot;&gt;本篇文章代码地址&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.cyixlq.top/categories/Android/"/>
    
    
    <category term="MVVM" scheme="https://www.cyixlq.top/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>Android MVVM探索(一) - DataBiding初解</title>
    <link href="https://www.cyixlq.top/2018/10/22/MVVM1/"/>
    <id>https://www.cyixlq.top/2018/10/22/MVVM1/</id>
    <published>2018-10-22T09:39:00.000Z</published>
    <updated>2021-01-15T08:30:39.728Z</updated>
    
    <content type="html"><![CDATA[<h5 id="发现我好久没写博客，其实最近一直都很想写博客的，但是不知道写点什么好。刚好碰上最近在学习Android的MVVM设计模式以及官方提供给我们的控件，所以才有了这篇文章。（其实还是因为我懒，我懒！）"><a href="#发现我好久没写博客，其实最近一直都很想写博客的，但是不知道写点什么好。刚好碰上最近在学习Android的MVVM设计模式以及官方提供给我们的控件，所以才有了这篇文章。（其实还是因为我懒，我懒！）" class="headerlink" title="发现我好久没写博客，其实最近一直都很想写博客的，但是不知道写点什么好。刚好碰上最近在学习Android的MVVM设计模式以及官方提供给我们的控件，所以才有了这篇文章。（其实还是因为我懒，我懒！）"></a>发现我好久没写博客，其实最近一直都很想写博客的，但是不知道写点什么好。刚好碰上最近在学习Android的MVVM设计模式以及官方提供给我们的控件，所以才有了这篇文章。（其实还是因为我懒，我懒！）</h5><p>今天我想给大家讲讲DataBinding，为了保证我写的不会出错，我也借鉴参考了不少文章和视频。给大家看看一篇我个人觉得还不错的。<a href="https://juejin.im/post/5a55ecb6f265da3e4d7298e9">DataBinding最全使用说明（掘金博客）</a>还有某课网的视频，<a href="https://www.imooc.com/learn/719">Android Data Binding实战-入门篇</a>、<a href="https://www.imooc.com/learn/720">Android Data Binding实战-高级篇</a></p><p><a href="https://github.com/cyixlq/MVVMTest">本篇文章代码地址</a></p><span id="more"></span><p><a href="https://cyixlq.top/2018/10/22/MVVM1/">Android MVVM探索(一) - DataBiding初解</a></p><p><a href="https://cyixlq.top/2018/10/23/MVVM2/">Android MVVM探索(二) - DataBiding常用注解</a></p><p><a href="https://cyixlq.top/2018/10/29/MVVM3/">Android MVVM探索(三) - ViewModel，DataBinding，LiveData混合三打</a></p><h3 id="1-什么是DataBinding？"><a href="#1-什么是DataBinding？" class="headerlink" title="1, 什么是DataBinding？"></a>1, 什么是DataBinding？</h3><p>DataBinding,2015年IO大会介绍的一个框架，字面理解即为数据绑定，是Google对MVVM在Android上的一种实现，可以直接绑定数据到xml中，并实现自动刷新（即，数据变化UI进行相应的变化）。而且还支持一些表达式。比如常见的三元运算符：</p><blockquote><p>1+x == 3 ? “true” : “false”</p></blockquote><p>它还可以支持lambda表达式：</p><blockquote><p>(v,fcs) -&gt; presenter.onFocusChange(user)}</p></blockquote><p>使用了DataBinding，可以省去一些控件绑定代码，例如：findviewById等。</p><h3 id="2-开始使用DataBinding"><a href="#2-开始使用DataBinding" class="headerlink" title="2, 开始使用DataBinding"></a>2, 开始使用DataBinding</h3><p>要想使用DataBinding的话，首先要在你安卓工程中，安卓Application的module（一般为app这个module）的android配置中加上如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    &#x2F;&#x2F; 这里省去一些常有的配置代码</span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，如果你是使用Kotlin进行编程的话，你还要在加入了上面代码的Gradle文件中顶部加上以下代码，否则Kotlin将无法识别DataBinding资源，至于什么是DataBinding资源，我们后面会提到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#39;kotlin-kapt&#39;</span><br></pre></td></tr></table></figure><p>是的，你没有看错，就这么简单我们就加上了DataBiding，不需要引入任何依赖。<br>首先我们先建立一个普通类作为ViewModel：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package top.cyixlq.test</span><br><span class="line"></span><br><span class="line">class MainViewModel &#123;</span><br><span class="line">    var name &#x3D; &quot;张三&quot;</span><br><span class="line">    var age &#x3D; 15</span><br><span class="line">    var isMan &#x3D; true</span><br><span class="line">    fun log() &#123;</span><br><span class="line">        Log.d(&quot;MyTAG&quot;, &quot;按钮被点击了一下&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，我们要将我们布局文件代码进行一些改动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;layout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;data&gt;</span><br><span class="line">        &lt;variable</span><br><span class="line">            name&#x3D;&quot;viewModel&quot;</span><br><span class="line">            type&#x3D;&quot;top.cyixlq.test.MainViewModel&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;data&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;vertical&quot;</span><br><span class="line">        tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:text&#x3D;&quot;@&#123;viewModel.name&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:text&#x3D;&quot;@&#123;String.valueOf(viewModel.age)&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:text&#x3D;&quot;@&#123;viewModel.isMan ? @string&#x2F;man : @string&#x2F;woman&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:onClick&#x3D;&quot;@&#123;v -&gt; viewModel.log()&#125;&quot;</span><br><span class="line">            android:text&#x3D;&quot;点我&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line">&lt;&#x2F;layout&gt;</span><br></pre></td></tr></table></figure><p>最后，改造我们的Activity代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class MainActivity : AppCompatActivity() &#123;</span><br><span class="line"></span><br><span class="line">    private lateinit var binding: ActivityMainBinding</span><br><span class="line"></span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        binding &#x3D; DataBindingUtil.setContentView(this, R.layout.activity_main)</span><br><span class="line">        &#x2F;&#x2F; 第一种将数据填充到xml文件中的方法(代码在下面这行)，我们直接实例化了一个MainViewModel赋值给BR资源中一个叫viewModel的变量</span><br><span class="line">        &#x2F;&#x2F; binding.setVariable(BR.viewModel, MainViewModel())</span><br><span class="line">        &#x2F;&#x2F; 以下是一些说明：</span><br><span class="line">        &#x2F;&#x2F; BR就是前文提到的DataBinding资源，像R文件一样自动生成，记录所有xml中data标签内的变量名称，有点像控件id的感觉</span><br><span class="line">        &#x2F;&#x2F; viewModel来自布局文件中data标签内的variable标签中的name</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 第二种将数据填充到xml文件中的方法(代码在下面这行),viewModel这个变量名视你在xml中variable标签中的name而定</span><br><span class="line">        binding.viewModel &#x3D; MainViewModel()</span><br><span class="line">        &#x2F;&#x2F; 假如你的name为user,并且class名称也为User的话(name和class的名称不一定要相同)</span><br><span class="line">        &#x2F;&#x2F; 那么代码就是binding.user &#x3D; User()</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; java 代码如下</span><br><span class="line">        &#x2F;&#x2F; binding.setViewModel(new MainViewModel())</span><br><span class="line">        &#x2F;&#x2F; binding.setUser(new User())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun onDestroy() &#123;</span><br><span class="line">        super.onDestroy()</span><br><span class="line">        &#x2F;&#x2F; 在Activity销毁时记得解绑，以免内存泄漏</span><br><span class="line">        binding.unbind()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3，-加入DataBinding后，xml文件的一些新的用法"><a href="#3，-加入DataBinding后，xml文件的一些新的用法" class="headerlink" title="3， 加入DataBinding后，xml文件的一些新的用法"></a>3， 加入DataBinding后，xml文件的一些新的用法</h3><ol><li><p>数据的填充</p><p> 可以很明显的看到，我们在布局文件的最外层不是任何布局标签，而是layout标签。之后再引入data标签，data里面是变量集合，整个xml文件中只允许有一个data标签。data标签中可以包含多个variable。name代表变量名称，type是变量类型。在activity中，我们新建了一个binding变量，并且通过binding变量把MainViewModel实例化的对象赋值到xml文件中，这样我们在xml中就可以直接填充到对应控件中。通过@{}，我们的控件就可以直接引用到viewModel中的对应的值。就像：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text&#x3D;&quot;@&#123;viewModel.name&#125;&quot;</span><br></pre></td></tr></table></figure></li><li><p>import标签</p><p> 就像java中的import关键字一样，可以导入类型，所以我们上面的xml文件中data部份还可以这样写：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;import type&#x3D;&quot;top.cyixlq.test.MainViewModel&quot;&#x2F;&gt;</span><br><span class="line">&lt;variable</span><br><span class="line">    name&#x3D;&quot;viewModel&quot;</span><br><span class="line">    type&#x3D;&quot;MainViewModel&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p> 我们还注意到，填充age属性的时候，我们是@{String.valueOf(viewModel.age)}。因为age是整数型，我们知道TextView的Text是不可以为整数型的，所以我们使用了String这个类中的方法进行了转换。按理说，String理应也需要使用import标签进行引入，然而我们并没有这么做。是的，和Java一样，java.lang包下的东西是自动引入的。</p></li><li><p>三元运算符和lambda表达式以及简单运算</p><p> 我们可以看到，我们填充isMan这个属性的时候使用了三元运算符，并且使用@string/man和@string/woman作为两个可选值。看起来是不是很神奇？其实我们也可以直接这样写：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text&#x3D;&#39;@&#123;viewModel.isMan ? &quot;男&quot; : &quot;女&quot;&#125;&#39;</span><br></pre></td></tr></table></figure><p> 但是值得注意的是，在Windows下，我们这样写可能会报错。是关于utf-8的一个错误，具体不太清楚。如果你是java代码，在编译的时候会告诉你这个错误。如果是kotlin下，就会显示无法打印这个错误log。所以我还是推荐引用string资源。</p><p> 就像我们在xml文件中设置按钮的点击事件一样，我们可以直接引入lambda表达式，从而直接调用viewModel中的公开方法，是不是觉得简单多了？</p><p> 虽然可以直接在xml文件中进行运算了，例如字符串的拼接，数字的加减，如下所示：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:text&#x3D;&quot;@&#123;String.valueOf(viewModel.age + 1)&#125;&quot;</span><br><span class="line">android:text&#x3D;&#39;&quot;性别：&quot; + viewModel.isMan ? &quot;男&quot; : &quot;女&quot;&#39;</span><br></pre></td></tr></table></figure><p> 但是，我不推荐在xml文件中进行过于复杂的运算，可以在ViewModel类中处理好之后利用函数返回。如下所示：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- xml文件中 --&gt;</span><br><span class="line">android:text&#x3D;&quot;@&#123;viewModel.convertSex()&#125;&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; MainViewModel文件中</span><br><span class="line">fun convertSex(): String &#123;</span><br><span class="line">    var result &#x3D; &quot;性别：&quot;</span><br><span class="line">    val sex &#x3D; if (isMan) &quot;男&quot; else &quot;女&quot;</span><br><span class="line">    return result + sex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>include标签的一些变化</p><p> 我们在开发中难免要进行布局的复用，这就会用到include标签了，但是如果我们引入的布局文件中也有variable怎么办，怎么才能从当前布局文件中传入到include导入的布局中呢？请直接看代码说明！我们以自己做一个标题栏为例。</p><ol><li>首先隐藏我们原有的标题栏，在Activity的onCreate中加入下面的代码： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">supportActionBar?.hide()</span><br><span class="line">&#x2F;&#x2F; java代码</span><br><span class="line">&#x2F;&#x2F; ActionBar actionBar &#x3D; getSupportActionBar();</span><br><span class="line">&#x2F;&#x2F; if (actionBar !&#x3D; null) actionBar.hide()</span><br></pre></td></tr></table></figure></li><li>新建一个layout_title_bar.xml，内容如下： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;layout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class="line">    &lt;data&gt;</span><br><span class="line">        &lt;variable</span><br><span class="line">            name&#x3D;&quot;title&quot;</span><br><span class="line">            type&#x3D;&quot;String&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;data&gt;</span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;?attr&#x2F;actionBarSize&quot;</span><br><span class="line">        android:background&#x3D;&quot;@color&#x2F;colorPrimary&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_centerInParent&#x3D;&quot;true&quot;</span><br><span class="line">            android:textColor&#x3D;&quot;@android:color&#x2F;white&quot;</span><br><span class="line">            android:text&#x3D;&quot;@&#123;title&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line">&lt;&#x2F;layout&gt;</span><br></pre></td></tr></table></figure></li><li>在activity_main.xml中加入以下代码： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;variable</span><br><span class="line">    name&#x3D;&quot;text&quot;</span><br><span class="line">    type&#x3D;&quot;String&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 这里传过去的属性名称要与include引入的布局文件中variable的name一样 --&gt;</span><br><span class="line">&lt;!-- 同样，这里可以使用MainViewModel中的某个字符串属性作为值传过去，不声明一个新的variable --&gt;</span><br><span class="line">&lt;include layout&#x3D;&quot;@layout&#x2F;layout_titlt_bar&quot;</span><br><span class="line">    title&#x3D;&quot;@&#123;text&#125;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li><li>别忘了在Activity中给text赋值： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binding.text &#x3D; &quot;测试&quot;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="4，-关于Activity文件中binding变量的一些说明"><a href="#4，-关于Activity文件中binding变量的一些说明" class="headerlink" title="4， 关于Activity文件中binding变量的一些说明"></a>4， 关于Activity文件中binding变量的一些说明</h3><ol><li>binding变量的类型是ActivityMainBinding，这个是项目build后自动生成的，根据布局文件名：activity_main.xml 来命名的类名称。也许你也发现了，它就是布局文件每个单词首字母大写，然后拼接上Binding。</li><li>我们前面说过，加入DataBinding后我们可以省去一些UI相关代码，比如findviewById。那么具体是怎么操作呢。很简单，在binding变量赋值后，我们直接通过binding.控件ID就可以直接获取该控件实例。例如：binding.button.setOnClickListener(*)</li><li>我们还可以将xml文件中的variable进行赋值。具体见上面Activity代码及相关注释！</li></ol><h3 id="5，数据的实时更新，双向绑定"><a href="#5，数据的实时更新，双向绑定" class="headerlink" title="5，数据的实时更新，双向绑定"></a>5，数据的实时更新，双向绑定</h3><p>在MainViewModel中和xml布局文件中新添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; MainViewModel中</span><br><span class="line">fun oneYearLater() &#123;</span><br><span class="line">    age++</span><br><span class="line">    Log.d(&quot;MyTAG&quot;, &quot;年龄：$age&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在xml布局文件中 --&gt;</span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:onClick&#x3D;&quot;@&#123;v -&gt; viewModel.oneYearLater()&#125;&quot;</span><br><span class="line">    android:text&#x3D;&quot;一年后&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>当我们点击这个按钮一年后之后会执行oneYearLater方法，里面的age属性会自增。但是，这样写好之后，我们发现age变化了，但是视图上的年龄的文字并没有刷新。我们不是说加入了DataBinding之后会自动实时刷新吗？别急，如果我们要实现实时刷新的话，我们要对MainViewModel进行小小的改造，其中有三种方法：</p><ol><li><p>就像下面那样，将对应属性改成这样：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; var age &#x3D; 15</span><br><span class="line">var age &#x3D; ObservableInt(15)</span><br><span class="line"></span><br><span class="line">fun oneYearLater() &#123;</span><br><span class="line">    &#x2F;&#x2F; age++</span><br><span class="line">    val lastAge &#x3D; age.get()</span><br><span class="line">    age.set(lastAge + 1)</span><br><span class="line">    Log.d(&quot;MyTAG&quot;, &quot;年龄：$age&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 将变量age声明为可观察的Int对象。其中，类似ObservableInt的变量类型还有：</p><ul><li>ObservableBoolean</li><li>ObservableByte</li><li>ObservableChar</li><li>ObservableDouble</li><li>ObservableLong<br>…此处省略了一些基本数据类型</li></ul><p> 对于列表和Map，还有下面这些类型：</p><ul><li>ObservableList&lt; T &gt;</li><li>ObservableArrayList&lt; T &gt;</li><li>ObservableArrayMap&lt;K,V&gt;</li><li>ObservableMap&lt;K,V&gt;</li></ul><p> 那么对于String或者自定义的类这种非基本数据类型，那么怎么办？DataBinding给我们提供了：ObservableField<T>，我们就可以这样用：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val name &#x3D; ObservableField&lt;String&gt;(&quot;张三&quot;)</span><br></pre></td></tr></table></figure><p> 对于序列化，还有这个数据类型：</p><blockquote><p>ObservableParcelable&lt; T &gt;</p></blockquote></li><li><p>让类继承BaseObservable：</p><p> 我们先新建一个ObserveViewModel的类，让它继承BaseObservable：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class ObserveViewModel : BaseObservable() &#123;</span><br><span class="line"></span><br><span class="line">    private var firstName &#x3D; &quot;y&quot;</span><br><span class="line">    private var lastName &#x3D; &quot;c&quot;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 这里要加上这个标签，在set方法中BR才能找到对应属性</span><br><span class="line">    @Bindable</span><br><span class="line">    fun getFirstName(): String &#123;</span><br><span class="line">        return firstName</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bindable</span><br><span class="line">    fun getLastName():String &#123;</span><br><span class="line">        return lastName</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setFirstName(name:String) &#123;</span><br><span class="line">        this.firstName &#x3D; name</span><br><span class="line">        notifyPropertyChanged(BR.firstName)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setLastName(name:String) &#123;</span><br><span class="line">        this.lastName &#x3D; name</span><br><span class="line">        notifyPropertyChanged(BR.lastName)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 改姓的方法</span><br><span class="line">    fun changeLastName() &#123;</span><br><span class="line">        setLastName(&quot;薛&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在xml布局中进行引入，并且将对应属性值进行展示以及设定按钮点击事件：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 这段请放在data标签内 --&gt;</span><br><span class="line">&lt;variable</span><br><span class="line">    name&#x3D;&quot;observeViewModel&quot;</span><br><span class="line">    type&#x3D;&quot;top.cyixlq.test.ObserveViewModel&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:text&#x3D;&quot;@&#123;observeViewModel.firstName&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:text&#x3D;&quot;@&#123;observeViewModel.lastName&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:text&#x3D;&quot;改姓&quot;</span><br><span class="line">    android:onClick&#x3D;&quot;@&#123;v -&gt; observeViewModel.changeLastName()&#125;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p> 别忘了还要在Activity中进行赋值：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val observeViewModel &#x3D; ObserveViewModel()</span><br><span class="line">binding.observeViewModel &#x3D; observeViewModel</span><br></pre></td></tr></table></figure></li><li><p>在Activity中进行监听。</p><p> 在ObserveViewModel类中新添加一个属性：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val age &#x3D; ObservableInt(17)</span><br></pre></td></tr></table></figure><p> 在Activity中新加入如下代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 给按钮设置点击监听事件</span><br><span class="line">binding.btnAddAge.setOnClickListener &#123;</span><br><span class="line">    val lastAge &#x3D; observeViewModel.age.get()</span><br><span class="line">    observeViewModel.age.set(lastAge + 1)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 监听ObserveViewModel中值的变化并进行回调处理</span><br><span class="line">observeViewModel.age.addOnPropertyChangedCallback(object : Observable.OnPropertyChangedCallback() &#123;</span><br><span class="line">    override fun onPropertyChanged(observable: Observable, i: Int) &#123;</span><br><span class="line">        binding.age.text &#x3D; observeViewModel.age.get().toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 在布局文件中新增一个TextView展示新的属性，并添加一个按钮改变新的属性值：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:id&#x3D;&quot;@+id&#x2F;age&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:text&#x3D;&quot;年龄&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:id&#x3D;&quot;@+id&#x2F;btn_add_age&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:text&#x3D;&quot;加一岁&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li></ol><p>看过上面三种方法后，是不是觉得第一种方法最简单？是的，我个人也比较推崇第一种方法，简单粗暴，但是并不意味着其他方法就用不到了，我们还是应该根据业务需求使用不同的方法灵活变通！</p><p>了解Vue的同学知道，当我使用:value=的时候，就可以实现数据视图双向绑定。即输入框中的内容是什么，对应的属性值就是输入框中的内容。那么，DataBding也可以做到吗？答案是当然可以的。首先我们在MainViewModel中新添加一个text属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val text &#x3D; ObservableField&lt;String&gt;(&quot;&quot;)</span><br></pre></td></tr></table></figure><p>然后在activity_main.xml布局文件中多加一个EditText和一个TextView：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:text&#x3D;&quot;@&#123;viewModel.text&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;EditText</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:text&#x3D;&quot;@&#x3D;&#123;viewModel.text&#125;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>这样做完之后，我们在输入框中输入什么，我们在TextView上面看到的就是什么。这样就实现了双向绑定。我们不然发现，我们实现双向绑定其实就是多加了一个“ = ”！</p><h2 id="OK，这一小章节我们就先到这里了，下一章节我们就介绍一下DataBinding的一些常用注解！另外本章节中出现的问题还望大家留言指正，毕竟还是在MVVM探索道路中！"><a href="#OK，这一小章节我们就先到这里了，下一章节我们就介绍一下DataBinding的一些常用注解！另外本章节中出现的问题还望大家留言指正，毕竟还是在MVVM探索道路中！" class="headerlink" title="OK，这一小章节我们就先到这里了，下一章节我们就介绍一下DataBinding的一些常用注解！另外本章节中出现的问题还望大家留言指正，毕竟还是在MVVM探索道路中！"></a>OK，这一小章节我们就先到这里了，下一章节我们就介绍一下DataBinding的一些常用注解！另外本章节中出现的问题还望大家留言指正，毕竟还是在MVVM探索道路中！</h2>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;发现我好久没写博客，其实最近一直都很想写博客的，但是不知道写点什么好。刚好碰上最近在学习Android的MVVM设计模式以及官方提供给我们的控件，所以才有了这篇文章。（其实还是因为我懒，我懒！）&quot;&gt;&lt;a href=&quot;#发现我好久没写博客，其实最近一直都很想写博客的，但是不知道写点什么好。刚好碰上最近在学习Android的MVVM设计模式以及官方提供给我们的控件，所以才有了这篇文章。（其实还是因为我懒，我懒！）&quot; class=&quot;headerlink&quot; title=&quot;发现我好久没写博客，其实最近一直都很想写博客的，但是不知道写点什么好。刚好碰上最近在学习Android的MVVM设计模式以及官方提供给我们的控件，所以才有了这篇文章。（其实还是因为我懒，我懒！）&quot;&gt;&lt;/a&gt;发现我好久没写博客，其实最近一直都很想写博客的，但是不知道写点什么好。刚好碰上最近在学习Android的MVVM设计模式以及官方提供给我们的控件，所以才有了这篇文章。（其实还是因为我懒，我懒！）&lt;/h5&gt;&lt;p&gt;今天我想给大家讲讲DataBinding，为了保证我写的不会出错，我也借鉴参考了不少文章和视频。给大家看看一篇我个人觉得还不错的。&lt;a href=&quot;https://juejin.im/post/5a55ecb6f265da3e4d7298e9&quot;&gt;DataBinding最全使用说明（掘金博客）&lt;/a&gt;还有某课网的视频，&lt;a href=&quot;https://www.imooc.com/learn/719&quot;&gt;Android Data Binding实战-入门篇&lt;/a&gt;、&lt;a href=&quot;https://www.imooc.com/learn/720&quot;&gt;Android Data Binding实战-高级篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cyixlq/MVVMTest&quot;&gt;本篇文章代码地址&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.cyixlq.top/categories/Android/"/>
    
    
    <category term="MVVM" scheme="https://www.cyixlq.top/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>生活中，那些被我们忽视了的美好！</title>
    <link href="https://www.cyixlq.top/2018/05/30/%E7%94%9F%E6%B4%BB%E4%B8%AD%EF%BC%8C%E9%82%A3%E4%BA%9B%E8%A2%AB%E6%88%91%E4%BB%AC%E5%BF%BD%E8%A7%86%E4%BA%86%E7%9A%84%E7%BE%8E%E5%A5%BD%EF%BC%81/"/>
    <id>https://www.cyixlq.top/2018/05/30/%E7%94%9F%E6%B4%BB%E4%B8%AD%EF%BC%8C%E9%82%A3%E4%BA%9B%E8%A2%AB%E6%88%91%E4%BB%AC%E5%BF%BD%E8%A7%86%E4%BA%86%E7%9A%84%E7%BE%8E%E5%A5%BD%EF%BC%81/</id>
    <published>2018-05-30T15:32:59.000Z</published>
    <updated>2021-04-12T02:20:42.187Z</updated>
    
    <content type="html"><![CDATA[<iframe class="player" src="https://v.qq.com/txp/iframe/player.html?vid=l0649b0vtvo&amp;tiny=0&amp;auto=0" allowfullscreen frameborder="0" style="width: 100%; height: 517px;"></iframe>上面是一个4分多钟的短视频，故事情节很简单，男女主角原本是一对恩爱夫妻，但结婚后琐碎的生活消磨了激情，像空气一样习惯彼此以后，便不再去表达爱，甚至连每年的纪念日，也仅仅被当成了一种可有可无的仪式。<p>寻思良久以后，丈夫觉得他和妻子已经没有感情了，继续走下去彼此都不会幸福，便提出离婚。</p><p>妻子想了一夜，同意离婚，不过她希望丈夫可以在接下来的一个月里，完成她提出的一些要求。</p><p>丈夫虽然有点心不甘情不愿，但一想到30天后一切都结束了，便答应了妻子。</p><p>倒计时的30天里，妻子要丈夫做的事都很简单：上班前抱一抱她，醒来后亲一下她，走在路上牵一牵她的手，睡前说一句“我爱你”……</p><p>最开始，丈夫牵手的时候像上刑场，手指尖刚一触碰到就缩回，拥抱的时候保持距离，亲吻的时候勉强碰嘴唇就转过身去，说话的时候也心不在焉。</p><p>然而15天后，当妻子伸出右手时，丈夫已经可以很自然地伸出左手，灯光下拥抱她，起床时亲吻她，仿佛回到了两人坠入爱河的时候。以前被他所忽略掉的爱和关心，又再一次被找了回来。</p><p>30天的期限到了，丈夫终于明白，是自己错了。他们不是不爱了，而是忘记了如何去爱。</p><p>当热情在油盐柴米中归于平淡，曾经狂热的心总会觉得若有所失，然而我们却忽略了，其实平淡如水的生活才是人生常态。</p><h4 id="摘自简书："><a href="#摘自简书：" class="headerlink" title="摘自简书："></a>摘自简书：</h4><p>作者：衷曲无闻</p><p>链接：<a href="https://www.jianshu.com/p/9733bce8fc4a">https://www.jianshu.com/p/9733bce8fc4a</a></p><p>來源：简书</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe class=&quot;player&quot; src=&quot;https://v.qq.com/txp/iframe/player.html?vid=l0649b0vtvo&amp;amp;tiny=0&amp;amp;auto=0&quot; allowfullscreen frameborder=&quot;0&quot; s</summary>
      
    
    
    
    <category term="随笔" scheme="https://www.cyixlq.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://www.cyixlq.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>试用一下RxJava加Retrofit</title>
    <link href="https://www.cyixlq.top/2018/05/19/%E8%AF%95%E7%94%A8%E4%B8%80%E4%B8%8BRxJava%E5%8A%A0Retrofit/"/>
    <id>https://www.cyixlq.top/2018/05/19/%E8%AF%95%E7%94%A8%E4%B8%80%E4%B8%8BRxJava%E5%8A%A0Retrofit/</id>
    <published>2018-05-19T13:37:11.000Z</published>
    <updated>2021-04-12T02:52:06.677Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这段时间我已经在一个公司实习了，虽然工资不高，我并没有太多的介意。但是有一点是我不舒服的，负责我们部门的经理助理似乎看不起实习生，对我有些轻蔑。主要是他技术也不是很牛逼那种。整个公司用的技术还是比较落后那种。当我推荐Vue时竟然说这种别人封装好的js不太好。当时内心有一千条草泥马奔跑，那你为什么还要用jQuery？so，我打算跳槽，跳去更有发展的公司，毕竟我现在是实习，主要还是希望得到成长~于是接到了一个安卓面试，所以特地前来写下这篇文章进行复习。（本人面试现在的公司就是来做安卓的，但是人手不够让我做做前端）</p><span id="more"></span><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>安卓现在比较热火的四大框架应该是Rxjava，retrofit，Okhttp，Dagger。于是我去翻各种博文自己尝试着去写一个小demo。首先来看看我们这个小demo的一个效果图：<br><img src="/images/%E8%AF%95%E7%94%A8RxJava%E5%8A%A0Retrofit%E6%95%88%E6%9E%9C%E5%9B%BE.gif" alt="效果图.gif"><br>可以看到我们这个demo就是调用了一个接口，有一个滑动列表，有图片，有的是视频，点进去可以观看视频。一个很简单的App DEMO。好了废话不多说，让我们开始吧！<br><strong>第一</strong>，先来看看我们整个项目引入的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</span><br><span class="line">implementation &#39;com.android.support:appcompat-v7:27.1.0&#39;</span><br><span class="line">implementation &#39;com.android.support:recyclerview-v7:27.1.0&#39;</span><br><span class="line">implementation &#39;com.android.support:cardview-v7:27.1.0&#39;</span><br><span class="line">implementation &#39;com.android.support.constraint:constraint-layout:1.0.2&#39;</span><br><span class="line">testImplementation &#39;junit:junit:4.12&#39;</span><br><span class="line">androidTestImplementation &#39;com.android.support.test:runner:1.0.1&#39;</span><br><span class="line">androidTestImplementation &#39;com.android.support.test.espresso:espresso-core:3.0.1&#39;</span><br><span class="line">&#x2F;&#x2F;最主要的是下面这几条</span><br><span class="line">implementation &quot;io.reactivex.rxjava2:rxjava:2.1.10&quot;</span><br><span class="line">implementation &#39;io.reactivex.rxjava2:rxandroid:2.0.2&#39;</span><br><span class="line">implementation &#39;com.squareup.retrofit2:retrofit:2.4.0&#39;</span><br><span class="line">implementation &#39;com.squareup.retrofit2:converter-gson:2.3.0&#39;</span><br><span class="line">implementation &#39;com.squareup.retrofit2:adapter-rxjava2:2.3.0&#39;</span><br><span class="line">implementation &#39;com.github.bumptech.glide:glide:4.6.1&#39;</span><br></pre></td></tr></table></figure><p>其次来看看我们整个项目的一个结构图（MVP架构，直接用MVPHelper生成的）：<br><img src="/images/%E8%AF%95%E7%94%A8RxJava%E5%8A%A0Retrofit%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BE.webp" alt="项目结构图"><br>现在来介绍一下整个项目结构：</p><ul><li>contract包里面放的是接口，用来约束后面的开发；</li><li>model里面就是实体类对象和提供后台数据的请求接口；</li><li>presenter，很明显就是MVP中的P，主持者类；</li><li>view里面本来我是要把activity也放进去的，但是没放，里面就放了一个RecyclerView的适配器。</li><li>utils里面是一个创建Retrofit的工厂类</li></ul><h6 id="至此，整个包的项目结构就算是介绍完成了。"><a href="#至此，整个包的项目结构就算是介绍完成了。" class="headerlink" title="至此，整个包的项目结构就算是介绍完成了。"></a>至此，整个包的项目结构就算是介绍完成了。</h6><p><strong>第二</strong>，在主界面布局文件中加入一个RcyclerView和一个ProgressBar，根布局我们直接使用的是ConstraintLayout：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.constraint.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    tools:context&#x3D;&quot;top.cyixlq.rxtestapp.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ProgressBar</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;pro&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:visibility&#x3D;&quot;gone&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintEnd_toEndOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintStart_toStartOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;rec&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;0dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;0dp&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintEnd_toEndOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintStart_toStartOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;android.support.constraint.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><p>接着就是创建一个RecyclerView的单个条目布局文件joker_rec_item.xml，根布局我们用的是CardView：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.CardView xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    app:cardCornerRadius&#x3D;&quot;5dp&quot;</span><br><span class="line">    app:cardElevation&#x3D;&quot;3dp&quot;</span><br><span class="line">    app:contentPadding&#x3D;&quot;5dp&quot;</span><br><span class="line">    android:layout_marginBottom&#x3D;&quot;5dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;title&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;标题&quot;</span><br><span class="line">        android:textSize&#x3D;&quot;15sp&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;content&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:textSize&#x3D;&quot;10sp&quot;</span><br><span class="line">        android:layout_marginTop&#x3D;&quot;20dp&quot;</span><br><span class="line">        android:text&#x3D;&quot;内容&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;img&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginTop&#x3D;&quot;40dp&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;android.support.v7.widget.CardView&gt;</span><br></pre></td></tr></table></figure><p>可以看出这个布局很简单，就是标题内容都是TextView，还有一个ImageView来展示图片。<br>然后把约束类建立起来，JokerContract：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public interface JokerContract &#123;</span><br><span class="line">    interface Model &#123;</span><br><span class="line">        void getJokerList(String type,String page,Observer&lt;Joker&gt; observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface View &#123;</span><br><span class="line">        void showJokerList(List&lt;Joker.DataBean&gt; list);</span><br><span class="line">        void getJokerListFinish();</span><br><span class="line">        void getJokerListErro(String msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface Presenter &#123;</span><br><span class="line">        void getJokerList(String type,String page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三</strong>，完成我们的Retrofit的工厂类RetrofitFactory：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class RetrofitFactory &#123;</span><br><span class="line">    private final static String BASE_URL&#x3D;&quot;https:&#x2F;&#x2F;www.apiopen.top&#x2F;&quot;;</span><br><span class="line">    private static final long TIMEOUT &#x3D; 30;</span><br><span class="line">    private static JokerApiService jokerApiService&#x3D;new Retrofit.Builder()</span><br><span class="line">            .baseUrl(BASE_URL)</span><br><span class="line">            &#x2F;&#x2F;添加Gson转换器</span><br><span class="line">            .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F; 添加Retrofit到RxJava的转换器</span><br><span class="line">            .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">            .build()</span><br><span class="line">            .create(JokerApiService.class);</span><br><span class="line"></span><br><span class="line">    public static JokerApiService getJokerApiService()&#123;</span><br><span class="line">        return jokerApiService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第四</strong>，完成M层，先完成接口api的请求，在model包中的apiservices包中新建一个接口，JokerApiService：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface JokerApiService &#123;</span><br><span class="line">    @GET(&quot;satinApi&quot;)</span><br><span class="line">    Observable&lt;Joker&gt; getJokerList(@Query(&quot;type&quot;)String type,@Query(&quot;page&quot;)String page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后利用GsonFormat创建实体类Joker（内容有点长，但是其实我们会用到的属性不多）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">public class Joker &#123;</span><br><span class="line">    private int code;</span><br><span class="line">    private String msg;</span><br><span class="line">    private List&lt;DataBean&gt; data;</span><br><span class="line">    &#x2F;&#x2F;get和set省略</span><br><span class="line">    public static class DataBean &#123;</span><br><span class="line">        private String type;</span><br><span class="line">        private String text;</span><br><span class="line">        private String user_id;</span><br><span class="line">        private String name;</span><br><span class="line">        private String screen_name;</span><br><span class="line">        private String profile_image;</span><br><span class="line">        private String created_at;</span><br><span class="line">        private Object create_time;</span><br><span class="line">        private String passtime;</span><br><span class="line">        private String love;</span><br><span class="line">        private String hate;</span><br><span class="line">        private String comment;</span><br><span class="line">        private String repost;</span><br><span class="line">        private String bookmark;</span><br><span class="line">        private String bimageuri;</span><br><span class="line">        private Object voiceuri;</span><br><span class="line">        private Object voicetime;</span><br><span class="line">        private Object voicelength;</span><br><span class="line">        private String status;</span><br><span class="line">        private String theme_id;</span><br><span class="line">        private String theme_name;</span><br><span class="line">        private String theme_type;</span><br><span class="line">        private String videouri;</span><br><span class="line">        private int videotime;</span><br><span class="line">        private String original_pid;</span><br><span class="line">        private int cache_version;</span><br><span class="line">        private String playcount;</span><br><span class="line">        private String playfcount;</span><br><span class="line">        private String cai;</span><br><span class="line">        private Object weixin_url;</span><br><span class="line">        private String image1;</span><br><span class="line">        private String image2;</span><br><span class="line">        private boolean is_gif;</span><br><span class="line">        private String image0;</span><br><span class="line">        private String image_small;</span><br><span class="line">        private String cdn_img;</span><br><span class="line">        private String width;</span><br><span class="line">        private String height;</span><br><span class="line">        private String tag;</span><br><span class="line">        private int t;</span><br><span class="line">        private String ding;</span><br><span class="line">        private String favourite;</span><br><span class="line">        private Object top_cmt;</span><br><span class="line">        private Object themes;</span><br><span class="line">        &#x2F;&#x2F;get和set省略</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着就是把Model类建起来，JokerModel：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class JokerModel implements JokerContract.Model &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void getJokerList(String type, String page, Observer&lt;Joker&gt; observer) &#123;</span><br><span class="line">        JokerApiService apiService&#x3D;RetrofitFactory.getJokerApiService();  &#x2F;&#x2F;获取接口</span><br><span class="line">        Observable&lt;Joker&gt; observable&#x3D; apiService.getJokerList(type,page);  &#x2F;&#x2F;利用接口获取数据</span><br><span class="line">        observable.subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(observer); &#x2F;&#x2F;在IO线程执行，发送结果到主线程</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="这样，M层算是完成了。"><a href="#这样，M层算是完成了。" class="headerlink" title="这样，M层算是完成了。"></a>这样，M层算是完成了。</h6><p><strong>第五</strong>，完成P层，新建JokerPresenter：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class JokerPresenter implements JokerContract.Presenter &#123;</span><br><span class="line"></span><br><span class="line">    JokerContract.Model mModel;</span><br><span class="line">    JokerContract.View mView;</span><br><span class="line"></span><br><span class="line">    public JokerPresenter(JokerContract.View view)&#123;</span><br><span class="line">        mModel&#x3D;new JokerModel();</span><br><span class="line">        this.mView&#x3D;view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void getJokerList(String type, String page) &#123;</span><br><span class="line">        mModel.getJokerList(type,page,new Observer&lt;Joker&gt;()&#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(Joker joker) &#123;</span><br><span class="line">                List&lt;Joker.DataBean&gt; list&#x3D;joker.getData();</span><br><span class="line">                mView.showJokerList(list);  &#x2F;&#x2F;视图层将列表结果展示出来</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line">                mView.getJokerListErro(e.getMessage());    &#x2F;&#x2F;视图层将错误信息显示出来</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() &#123;</span><br><span class="line">                mView.getJokerListFinish();    &#x2F;&#x2F;视图层完成数据获取状态</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="至此，P层算是完成了。"><a href="#至此，P层算是完成了。" class="headerlink" title="至此，P层算是完成了。"></a>至此，P层算是完成了。</h6><p><strong>第六</strong>，完成V层，也就是视图层，在第一步中我们已经把各种布局写完了，这里我们主要写activity和RecyclerView的适配器。先来写适配器，JokerAdapter：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">public class JokerAdapter extends RecyclerView.Adapter&lt;JokerAdapter.MyViewHolder&gt; &#123;</span><br><span class="line">    private List&lt;Joker.DataBean&gt; list;</span><br><span class="line">    private Context mContext;</span><br><span class="line">    private OnItemClickListener mOnItemClickListener;</span><br><span class="line"></span><br><span class="line">    public JokerAdapter(List&lt;Joker.DataBean&gt; list,Context context)&#123;</span><br><span class="line">        this.list&#x3D;list;</span><br><span class="line">        this.mContext&#x3D;context;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</span><br><span class="line">        View view&#x3D; LayoutInflater.from(parent.getContext()).inflate(R.layout.joker_rec_item,parent,false);</span><br><span class="line">        MyViewHolder viewHolder&#x3D;new MyViewHolder(view);</span><br><span class="line">        return viewHolder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onBindViewHolder(MyViewHolder holder, final int position) &#123;</span><br><span class="line">        holder.txt_title.setText(list.get(position).getName());</span><br><span class="line">        holder.txt_content.setText(list.get(position).getText());</span><br><span class="line">        Glide.with(mContext).load(list.get(position).getBimageuri()).into(holder.img);</span><br><span class="line">        if(mOnItemClickListener!&#x3D;null)&#123;</span><br><span class="line">            holder.itemView.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(View view) &#123;</span><br><span class="line">                    mOnItemClickListener.onClick(position);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        return list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;本来这个内部类是没有设置成静态的，但是听说不是静态的会造成内存泄漏？还望大神给我这个小白解答一下,感激不尽!</span><br><span class="line">    static class MyViewHolder extends RecyclerView.ViewHolder&#123;</span><br><span class="line"></span><br><span class="line">        TextView txt_title;</span><br><span class="line">        TextView txt_content;</span><br><span class="line">        ImageView img;</span><br><span class="line"></span><br><span class="line">        public MyViewHolder(View itemView) &#123;</span><br><span class="line">            super(itemView);</span><br><span class="line">            txt_title&#x3D;itemView.findViewById(R.id.title);</span><br><span class="line">            txt_content&#x3D;itemView.findViewById(R.id.content);</span><br><span class="line">            img&#x3D;itemView.findViewById(R.id.img);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;点击事件接口</span><br><span class="line">    public interface OnItemClickListener&#123;</span><br><span class="line">        void onClick( int position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;设置点击事件</span><br><span class="line">    public void setOnItemClickListener(OnItemClickListener onItemClickListener )&#123;</span><br><span class="line">        this.mOnItemClickListener&#x3D;onItemClickListener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是我的适配器的所有代码，其中有个问题想请教诸位大神，还请大神不吝赐教：ViewHolder那个内部类是没有设置成静态的，但是听说不是静态的会造成内存泄漏？还望大神给我这个小白解答一下,感激不尽!<br>接着就是MainActivity：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity implements JokerContract.View&#123;</span><br><span class="line"></span><br><span class="line">    public static final String TAG&#x3D;&quot;MainActivity&quot;;</span><br><span class="line"></span><br><span class="line">    JokerPresenter mPresenter;</span><br><span class="line">    JokerAdapter mAdapter;</span><br><span class="line">    List&lt;Joker.DataBean&gt; mList;</span><br><span class="line"></span><br><span class="line">    private RecyclerView mRecyclerView;</span><br><span class="line">    private ProgressBar mProgressBar;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mPresenter&#x3D;new JokerPresenter(this);</span><br><span class="line">        mRecyclerView&#x3D;findViewById(R.id.rec);</span><br><span class="line">        mProgressBar&#x3D;findViewById(R.id.pro);</span><br><span class="line">        initData();</span><br><span class="line">        mPresenter.getJokerList(&quot;29&quot;,&quot;1&quot;); &#x2F;&#x2F;我们只获取了第一页的数据</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initData()&#123;</span><br><span class="line">        mList&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        mAdapter&#x3D;new JokerAdapter(mList,this);</span><br><span class="line">        mAdapter.setOnItemClickListener(new JokerAdapter.OnItemClickListener() &#123; &#x2F;&#x2F;设置点击事件</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(int position) &#123;</span><br><span class="line">                String url&#x3D;mList.get(position).getVideouri();  &#x2F;&#x2F;获取对应的视频链接，并且通过intent携带链接进行跳转</span><br><span class="line">                Intent intent&#x3D;new Intent(MainActivity.this,VideoPlayActivity.class);</span><br><span class="line">                intent.putExtra(&quot;url&quot;,url);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        LinearLayoutManager manager&#x3D;new LinearLayoutManager(MainActivity.this);</span><br><span class="line">        mRecyclerView.setLayoutManager(manager);</span><br><span class="line">        mRecyclerView.setAdapter(mAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void showJokerList(List&lt;Joker.DataBean&gt; list) &#123;</span><br><span class="line">        mProgressBar.setVisibility(View.VISIBLE);</span><br><span class="line">        mList.addAll(list);</span><br><span class="line">        mAdapter.notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void getJokerListFinish() &#123;</span><br><span class="line">        mProgressBar.setVisibility(View.GONE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void getJokerListErro(String msg) &#123;</span><br><span class="line">        Toast.makeText(this, msg, Toast.LENGTH_SHORT).show();</span><br><span class="line">        Log.e(TAG,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="至此，V层算是完成了。"><a href="#至此，V层算是完成了。" class="headerlink" title="至此，V层算是完成了。"></a>至此，V层算是完成了。</h6><p><strong>第七</strong>，就是完成VideoActivity啦，我直接用的VideoView来播放网络视频，先把VideoActivity布局文件写好，activity_video_play.xml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.constraint.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    tools:context&#x3D;&quot;top.cyixlq.rxtestapp.VideoPlayActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;VideoView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;video&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;android.support.constraint.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><p>我就是直接放的一个VideoView。然后编写activity代码，让VideoView播放网络视频：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class VideoPlayActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private VideoView mVideoVIew;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_video_play);</span><br><span class="line">        mVideoVIew&#x3D;findViewById(R.id.video);</span><br><span class="line">        mVideoVIew.setMediaController(new MediaController(this));</span><br><span class="line">        mVideoVIew.setOnCompletionListener(new MediaPlayer.OnCompletionListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onCompletion(MediaPlayer mp) &#123;</span><br><span class="line">                Toast.makeText(VideoPlayActivity.this, &quot;播放完成了&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        startPlay();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void startPlay()&#123;</span><br><span class="line">        Intent intent&#x3D;getIntent();</span><br><span class="line">        String url&#x3D;intent.getStringExtra(&quot;url&quot;);</span><br><span class="line">        if(null!&#x3D;url) &#123;</span><br><span class="line">            mVideoVIew.setVideoURI(Uri.parse(url));</span><br><span class="line">            mVideoVIew.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能轻松实现VideoView播放网络视频啦。然后我们整个Demo也就这样写完了哦！</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><hr><p>这只是一个简单的Demo，个人也是刚开始接触不久，如果还有什么地方写的不对，还望各位大神指教，本人不胜感激，求大神带飞！本Demo的GitHub地址：<a href="https://github.com/cyixlq/RxTestApp">https://github.com/cyixlq/RxTestApp</a></p><h6 id="本人只是一个在IT技术上不断探索的小白，希望能跟着大家一起进步，好的，今天就写到这里，白了个白"><a href="#本人只是一个在IT技术上不断探索的小白，希望能跟着大家一起进步，好的，今天就写到这里，白了个白" class="headerlink" title="本人只是一个在IT技术上不断探索的小白，希望能跟着大家一起进步，好的，今天就写到这里，白了个白!"></a>本人只是一个在IT技术上不断探索的小白，希望能跟着大家一起进步，好的，今天就写到这里，白了个白!</h6>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这段时间我已经在一个公司实习了，虽然工资不高，我并没有太多的介意。但是有一点是我不舒服的，负责我们部门的经理助理似乎看不起实习生，对我有些轻蔑。主要是他技术也不是很牛逼那种。整个公司用的技术还是比较落后那种。当我推荐Vue时竟然说这种别人封装好的js不太好。当时内心有一千条草泥马奔跑，那你为什么还要用jQuery？so，我打算跳槽，跳去更有发展的公司，毕竟我现在是实习，主要还是希望得到成长~于是接到了一个安卓面试，所以特地前来写下这篇文章进行复习。（本人面试现在的公司就是来做安卓的，但是人手不够让我做做前端）&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.cyixlq.top/categories/Android/"/>
    
    
    <category term="Android新技术笔记" scheme="https://www.cyixlq.top/tags/Android%E6%96%B0%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用Vue做一个购物车</title>
    <link href="https://www.cyixlq.top/2018/05/19/%E4%BD%BF%E7%94%A8Vue%E5%81%9A%E4%B8%80%E4%B8%AA%E8%B4%AD%E7%89%A9%E8%BD%A6/"/>
    <id>https://www.cyixlq.top/2018/05/19/%E4%BD%BF%E7%94%A8Vue%E5%81%9A%E4%B8%80%E4%B8%AA%E8%B4%AD%E7%89%A9%E8%BD%A6/</id>
    <published>2018-05-19T13:27:52.000Z</published>
    <updated>2021-04-12T02:40:53.585Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本人刚大三，现在到了下学期，学校不让我们回去，赶我们出去实习。嗯。。。我是大专狗，不过一直热爱技术。只怪当初高中研究手机刷机包等技术荒废了学业（有点后悔了，文凭不好看了），其实很喜欢IT的，但是当时没电脑，Java都没入门。（好像闲话有点多）</p><h4 id="假正文"><a href="#假正文" class="headerlink" title="假正文"></a>假正文</h4><p>最近我实习的公司在做网上商城的一个项目，我负责购物车这一块。这个项目是一个Web项目，没有进行前后端分离，但是又得做手机端，感觉好像哪里不对。。。 </p><span id="more"></span><p>web框架使用的是SpringMVC，模板框架是FreeMarker，想到以后要做移动端，果断还是用json来进行数据交互，并没有用freemarker。网页静态文件全部写好了，放在了springmvc的Views中。按理来说还是进行前后端分离好点的，但是做网页的没接触过Vue，那好吧。。。<br>于是我就想到在页面直接引入Vue，可是又是在内网环境开发，只好在自己个人笔记本上下载vue.js再拷贝到内网电脑上进行页面上的引入。</p><h4 id="真正文"><a href="#真正文" class="headerlink" title="真正文"></a>真正文</h4><p>首先让我们看一下静态页面的效果图：<img src="/images/%E8%B4%AD%E7%89%A9%E8%BD%A6%E9%9D%99%E6%80%81%E6%95%88%E6%9E%9C%E5%9B%BE.webp" alt="静态页面效果图"></p><h5 id="简单说一下这个功能模块的需求："><a href="#简单说一下这个功能模块的需求：" class="headerlink" title="简单说一下这个功能模块的需求："></a>简单说一下这个功能模块的需求：</h5><ol><li>勾选全选，所有商品全部选中。在取消全选框的时候所有商品取消选择。</li><li>点击单个商品上的加号减号进行数量的增加和减少，右边小计实时计算出这个商品的价格合计。</li><li>点击单个商品上的删除按钮将商品从购物车中删除。</li><li>底部已选实时显示已经勾选的商品，右边合计金额实时显示所有勾选的商品的小计之和。<br>(是的，需求看起来不多，但是要结合后台去做还是需要点功夫的，但是这篇文章我们不牵扯后台，在前台造数据)<h5 id="现在让我们开始吧"><a href="#现在让我们开始吧" class="headerlink" title="现在让我们开始吧"></a>现在让我们开始吧</h5></li></ol><p><em><strong>一</strong></em>，创建一个Vue对象，设置好数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var cart; &#x2F;&#x2F;全局Vue对象</span><br><span class="line">&#x2F;&#x2F;通过封装一个方法来创建Vue对象</span><br><span class="line">function createVue(list) &#123;  &#x2F;&#x2F;传入通过后台获取的list</span><br><span class="line">  cart &#x3D; new Vue(&#123;</span><br><span class="line">el:&#39;#cart&#39;,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">list:list  &#x2F;&#x2F;商品列表</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>二</strong></em>，假设从后台请求到数据，然后赋值到Vue对象中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">window.onload &#x3D; function () &#123;</span><br><span class="line">&#x2F;&#x2F;请求后台代码   。。。。</span><br><span class="line">&#x2F;&#x2F;请求成功后将获得的list赋值给cart的list</span><br><span class="line">let list &#x3D; [</span><br><span class="line">&#123;</span><br><span class="line">goodsTitle: &quot;卫龙辣条&quot;,    &#x2F;&#x2F;商品名</span><br><span class="line">specifications: &quot;大包&quot;, &#x2F;&#x2F;商品规格</span><br><span class="line">unitPrice: &quot;5&quot;,  &#x2F;&#x2F;商品单价</span><br><span class="line">subimage1Filename :&quot;20180317eeftyd.jpg&quot;,&#x2F;&#x2F;商品图片名</span><br><span class="line">purchaseQuantity: 6&#x2F;&#x2F;商品数量</span><br><span class="line">&#125;, </span><br><span class="line">&#123;</span><br><span class="line">goodsTitle: &quot;雕牌洗衣粉&quot;,</span><br><span class="line">specifications: &quot;大包&quot;,</span><br><span class="line">unitPrice: &quot;13&quot;,</span><br><span class="line">subimage1Filename: &quot;20180317ggptfg.jpg&quot;,</span><br><span class="line">purchaseQuantity: 1</span><br><span class="line">&#125;, </span><br><span class="line">&#123;</span><br><span class="line">goodsTitle: &quot;旺仔牛奶&quot;,</span><br><span class="line">specifications: &quot;20盒装&quot;,</span><br><span class="line">unitPrice: &quot;45&quot;,</span><br><span class="line">subimage1Filename: &quot;20180317feftyp.jpg&quot;,</span><br><span class="line">purchaseQuantity: 1</span><br><span class="line">&#125;];</span><br><span class="line">createVue(list);  &#x2F;&#x2F;执行创建Vue对象方法</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><em><strong>三</strong></em>，修改html部分代码，将数据展示出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr v-for&#x3D;&quot;(item,index) in list&quot;&gt;</span><br><span class="line">  &lt;td&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; :id&#x3D;&quot;&#39;check&#39;+index&quot; name&#x3D;&quot;checkboxs&quot; &#x2F;&gt;</span><br><span class="line">&lt;label :for&#x3D;&quot;&#39;check&#39;+index&quot;&gt;&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;&#x2F;td&gt;</span><br><span class="line">  &lt;td&gt;</span><br><span class="line">&lt;img :src&#x3D;&quot;&#39;路径前缀&#x2F;&#39;+item.subimage1Filename&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;td&gt;</span><br><span class="line">  &lt;td style&#x3D;&quot;text-align:left;&quot;&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;item.goodsTitle&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;规格：&#123;&#123;item.specifications&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;td&gt;</span><br><span class="line">  &lt;td&gt;￥&#123;&#123;item.unitPrice&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;td class&#x3D;&quot;adddel&quot;&gt;</span><br><span class="line">&lt;em v-on:click&#x3D;&quot;minius(index)&quot;&gt;-&lt;&#x2F;em&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;number&quot; v-model.number&#x3D;&quot;item.purchaseQuantity&quot; &#x2F;&gt;</span><br><span class="line">&lt;em v-on:click&#x3D;&quot;add(index)&quot;&gt;+&lt;&#x2F;em&gt;</span><br><span class="line">  &lt;&#x2F;td&gt;</span><br><span class="line">  &lt;td&gt;￥&#123;&#123;item.unitPrice * item.purchaseQuantity&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;td&gt;&lt;button v-on:click&#x3D;&quot;checkDel(index)&quot;&gt;删除&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt; </span><br></pre></td></tr></table></figure><p>这样就能将单个商品部分全部循环打印出来，并且将对应的信息打印在对应位置。效果图如下：<br><img src="/images/%E6%95%88%E6%9E%9C%E5%9B%BE2_%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E6%98%AF%E6%88%91%E9%9A%8F%E4%BE%BF%E5%86%99%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E6%B2%A1%E6%9C%89%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA.webp" alt="效果图，图中的图片名和路径是我编的，所以找不到"><br><em><strong>四</strong></em>，实现全选和勾选时候总价的计算，这部分算是有点挑战了。我的思路是在Vue对象中新增加一个数据用来标识商品的选中状态，所以创建Vue方法中的代码改成如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cart &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#cart&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">list: list,</span><br><span class="line">checkeds: new Array(list.length) &#x2F;&#x2F;初始化成list的长度</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在html中将商品对应的checkbox与checkeds绑定起来,修改后的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; :id&#x3D;&quot;&#39;check&#39;+index&quot; name&#x3D;&quot;checkboxs&quot; v-model&#x3D;&quot;checkeds[index]&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>利用computed属性计算价格总和：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sum () &#123;</span><br><span class="line">let sum &#x3D; 0;</span><br><span class="line">for (let i in this.list) &#123;</span><br><span class="line">if (this.checkeds[i])  &#x2F;&#x2F;如果checkeds[i]的结果为truth，则进行累加</span><br><span class="line">  sum +&#x3D; this.list[i].unitPrice * this.list[i].purchaseQuantity;</span><br><span class="line">&#125;</span><br><span class="line">return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML部分，我们在对应位置用带入就能进行显示了。这样就能实现计算勾选过的商品小计之和了。接下来实现全选功能，在methods属性中添加一个方法checkAll，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">checkAll (event) &#123;  &#x2F;&#x2F;这里的event就是全选checkbox对象</span><br><span class="line">if (event.checked) &#123;  &#x2F;&#x2F;如果全选的checkbox选中，将checkeds所有的值设置为true，对应商品checkbox的选中状态自动更新</span><br><span class="line">for (let i &#x3D; 0; i &lt; this.checkeds.length; i++) &#123;</span><br><span class="line">Vue.set(this.checkeds, i, true);</span><br><span class="line">&#125;</span><br><span class="line"> else &#123;  &#x2F;&#x2F;否则就进行与上面相反的操作</span><br><span class="line">for (let i &#x3D; 0; i &lt; this.checkeds.length; i++) &#123;</span><br><span class="line">Vue.set(this.checkeds, i, false);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上面的一波操作，已经可以实现全选和点选时候的价格之和计算。我们还要统计商品选中的数量，这个很简单，同样使用computed属性，对checkeds中结果为truth的进行统计就好了，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checkNum: function () &#123;</span><br><span class="line">let num &#x3D; 0;</span><br><span class="line">for (let i in this.checkeds) &#123;</span><br><span class="line">if (this.checkeds[i]) &#123;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在html中的对应位置用代入即可。现在我们已经实现了近一半需求，让我们继续完成他们吧！<br><em><strong>五</strong></em>，实现购物车物品单个删除功能，这个就很简单啦，我们在methods中增加一个del方法，使用js数组的splice方法就可以实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">del (index) &#123;</span><br><span class="line">    this.list.splice(index, 1);  &#x2F;&#x2F;只需要从数组中移除对应项，视图会自动更新，不得不说，Vue太棒啦！</span><br><span class="line">    this.checkeds.splice(index,1); &#x2F;&#x2F;同时删除对应的选中状态标识</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是给删除按钮绑定点击事件(index是循环列表时候的下标)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click&#x3D;&quot;del(index)&quot;&gt;删除&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>这样我们就轻松实现了删除单个商品的需求，当然防止用户误删，在用户点击删除按钮时我们可以弹出一个确认框提示用户，这里我们就不去实现了。<br><em><strong>六</strong></em>，实现购物车单个商品的数量增加，减少，并实时更新商品的小计。首先在methods中添加增加方法add和减少方法minius：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add (index) &#123;</span><br><span class="line">this.list[index].purchaseQuantity++;  &#x2F;&#x2F;这里按理来说应该查询后台对应商品库存量来进行限制的，这里不涉及到后台所以没加</span><br><span class="line">&#125;,</span><br><span class="line">minius (index) &#123;</span><br><span class="line">if (this.list[index].purchaseQuantity &gt; 1) &#123;  &#x2F;&#x2F;这里添加一个限制，最少要有一个商品</span><br><span class="line">this.list[index].purchaseQuantity--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们在对应的加和减的按钮上绑定事件来触发这两个方法（index为列表循环时候的下标）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;td class&#x3D;&quot;adddel&quot;&gt;</span><br><span class="line">&lt;em v-on:click&#x3D;&quot;minius(index)&quot;&gt;-&lt;&#x2F;em&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;number&quot; v-model.number&#x3D;&quot;item.purchaseQuantity&quot; &#x2F;&gt;</span><br><span class="line">&lt;em v-on:click&#x3D;&quot;add(index)&quot;&gt;+&lt;&#x2F;em&gt;</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;￥&#123;&#123;item.unitPrice * item.purchaseQuantity&#125;&#125;&lt;&#x2F;td&gt;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看到我们在小计一栏直接进行商品单价和数量相乘，这样就可以实现实时更新了。</p><h5 id="至此，我们的需求就算是完成了，最后给大家留两个小问题思考一下"><a href="#至此，我们的需求就算是完成了，最后给大家留两个小问题思考一下" class="headerlink" title="至此，我们的需求就算是完成了，最后给大家留两个小问题思考一下"></a>至此，我们的需求就算是完成了，最后给大家留两个小问题思考一下</h5><p><em><strong>一</strong></em>，如何实现批量删除？<br><em><strong>二</strong></em>，在全选之后，我们取消了一个商品的状态，全选框的选中状态仍然是选中的，此时应该是不选中的，或者当我们一个一个把商品的选中状态全部勾选，全选框的状态仍然是补选中的，此时应该是选中状态（如下两图所示），这个现象如何解决？<br><img src="/images/%E9%97%AE%E9%A2%982%E7%9A%84%E7%8E%B0%E8%B1%A11.webp" alt="问题二的现象一"><br><img src="/images/%E9%97%AE%E9%A2%982%E7%9A%84%E7%8E%B0%E8%B1%A12.png" alt="问题二的现象二"></p><h4 id="后文"><a href="#后文" class="headerlink" title="后文"></a>后文</h4><p>本文的所有代码已经托管到GitHub，如果本文代码有误，请以GitHub上的为准，GitHub地址：<a href="https://github.com/cyixlq/vue_shopping_cart">https://github.com/cyixlq/vue_shopping_cart</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;本人刚大三，现在到了下学期，学校不让我们回去，赶我们出去实习。嗯。。。我是大专狗，不过一直热爱技术。只怪当初高中研究手机刷机包等技术荒废了学业（有点后悔了，文凭不好看了），其实很喜欢IT的，但是当时没电脑，Java都没入门。（好像闲话有点多）&lt;/p&gt;
&lt;h4 id=&quot;假正文&quot;&gt;&lt;a href=&quot;#假正文&quot; class=&quot;headerlink&quot; title=&quot;假正文&quot;&gt;&lt;/a&gt;假正文&lt;/h4&gt;&lt;p&gt;最近我实习的公司在做网上商城的一个项目，我负责购物车这一块。这个项目是一个Web项目，没有进行前后端分离，但是又得做手机端，感觉好像哪里不对。。。 &lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://www.cyixlq.top/categories/Vue/"/>
    
    
    <category term="vue" scheme="https://www.cyixlq.top/tags/vue/"/>
    
    <category term="Vue实战" scheme="https://www.cyixlq.top/tags/Vue%E5%AE%9E%E6%88%98/"/>
    
    <category term="购物车" scheme="https://www.cyixlq.top/tags/%E8%B4%AD%E7%89%A9%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5验证码提示404问题解决</title>
    <link href="https://www.cyixlq.top/2018/03/14/ThinkPHP5%E6%A1%86%E6%9E%B6%E9%AA%8C%E8%AF%81%E7%A0%81404/"/>
    <id>https://www.cyixlq.top/2018/03/14/ThinkPHP5%E6%A1%86%E6%9E%B6%E9%AA%8C%E8%AF%81%E7%A0%81404/</id>
    <published>2018-03-14T08:56:29.000Z</published>
    <updated>2021-04-12T03:05:17.723Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习php，用的是ThinkPHP的框架，学习的时候碰到一个验证码刷新的时候的404问题，困扰了我很久始终没有解决，最终在php中文网的ThinkPHP5的学习视频课程中的讨论区找到解决办法。<br>首先看一波图片（出现的现象及报错图片）：</p><span id="more"></span><p><img src="/images/TP5%E9%AA%8C%E8%AF%81%E7%A0%81404%E9%97%AE%E9%A2%98%E5%B1%95%E7%A4%BA.webp" alt="正常情况"><br>（这里可以看到验证码正常显示）</p><p><img src="/images/TP5%E9%AA%8C%E8%AF%81%E7%A0%81404%E9%97%AE%E9%A2%98%E5%B1%95%E7%A4%BA2.webp" alt="出现404问题了"><br>（点击看不清换一张图片就没了）  </p><p><img src="/images/TP5%E9%AA%8C%E8%AF%81%E7%A0%81404%E9%97%AE%E9%A2%98%E6%8E%A7%E5%88%B6%E5%8F%B0log%E8%BE%93%E5%87%BA.webp" alt="控制台出现报错"><br>（控制台出现报错，404）</p><p>这时候我的验证码刷新代码是这样的：<br><img src="/images/TP5%E9%AA%8C%E8%AF%81%E7%A0%81404%E9%97%AE%E9%A2%98%E4%BB%A3%E7%A0%811.webp" alt="原代码"><br>查到的解决办法，将代码改成如下图这样：<br><img src="/images/TP5%E9%AA%8C%E8%AF%81%E7%A0%81404%E9%97%AE%E9%A2%98%E4%BB%A3%E7%A0%812.webp" alt="解决问题的第一种办法"><br><img src="/images/TP5%E9%AA%8C%E8%AF%81%E7%A0%81404%E9%97%AE%E9%A2%98%E4%BB%A3%E7%A0%813.webp" alt="解决问题的第二种办法"><br>还有人说可以修改php.ini文件，但是php我也是刚学习不久，所以没去深究，反正问题是解决了的，哈哈。<br>当然解决了是不够的，还要用博客把它记下来才行啊！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在学习php，用的是ThinkPHP的框架，学习的时候碰到一个验证码刷新的时候的404问题，困扰了我很久始终没有解决，最终在php中文网的ThinkPHP5的学习视频课程中的讨论区找到解决办法。&lt;br&gt;首先看一波图片（出现的现象及报错图片）：&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://www.cyixlq.top/categories/PHP/"/>
    
    
    <category term="问题解决记录" scheme="https://www.cyixlq.top/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用命令</title>
    <link href="https://www.cyixlq.top/2018/03/14/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.cyixlq.top/2018/03/14/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2018-03-14T08:56:29.000Z</published>
    <updated>2021-01-15T08:30:39.729Z</updated>
    
    <content type="html"><![CDATA[<ul><li>最近闲来无事，把我github上的个人博客重新捣鼓了一下，之前也研究过，部署了一个个人博客在我的github上，但是发现不是那么回事，不是我     理解的那个样子，最后只好重新折腾一下。</li><li>重新查找资料发现github上的个人博客一般是用<strong>hexo+github pages</strong>做出来的，于是乎，我就想用这篇博文记载一下hexo的一些常用命令。</li><li>新建一篇博文或一个文件 <strong>hexo n</strong> “文件名” 或者完整写法 <strong>hexo new</strong> “文件名”</li><li>发布 <strong>hexo p</strong> 或者完整写法 <strong>hexo publish</strong></li><li>生成静态页面，也就是普普通通的网页，用于浏览的 <strong>hexo g</strong> 或者完整写法 <strong>hexo generate</strong></li><li>启动本地服务器，用于预览生成的静态文件 <strong>hexo s</strong> 或者完整写法 <strong>hexo server</strong></li><li>部署到服务器（一般我用来把生成的静态文件部署到github）<strong>hexo d</strong> 或者完整写法 <strong>hexo deploy</strong><span id="more"></span><h3 id="下面是一些快捷命令"><a href="#下面是一些快捷命令" class="headerlink" title="下面是一些快捷命令"></a>下面是一些快捷命令</h3></li><li><strong>hexo generate –deploy 和 hexo deploy –generate ：</strong> 先生成静态文件后部署到服务器（github），简写 ：<strong>hexo d -g</strong></li><li>直接用简写命令 <strong>hexo s -g</strong> 可以生成静态文件并且启动本地服务器进行预览</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>部署hexo博文教程可以参考这篇基础博客<a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" title="点我前往查看博文（基础）">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a>，写的挺详细的，我就不重复造轮子了，然后是一篇进阶的，作者是同一人<a href="http://www.cnblogs.com/fengxiongZz/p/7707568.html" title="点我前往查看博文（进阶）">http://www.cnblogs.com/fengxiongZz/p/7707568.html</a></li><li>本地服务器默认端口是4000，所以访问部署到本地服务器的地址是<strong>localhost:4000</strong>，如果端口被占用，或者你不喜欢这个端口号，可以通过命令<strong>hexo server -p 端口号</strong> 例如：<strong>hexo server -p 5000</strong></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;最近闲来无事，把我github上的个人博客重新捣鼓了一下，之前也研究过，部署了一个个人博客在我的github上，但是发现不是那么回事，不是我     理解的那个样子，最后只好重新折腾一下。&lt;/li&gt;
&lt;li&gt;重新查找资料发现github上的个人博客一般是用&lt;strong&gt;hexo+github pages&lt;/strong&gt;做出来的，于是乎，我就想用这篇博文记载一下hexo的一些常用命令。&lt;/li&gt;
&lt;li&gt;新建一篇博文或一个文件 &lt;strong&gt;hexo n&lt;/strong&gt; “文件名” 或者完整写法 &lt;strong&gt;hexo new&lt;/strong&gt; “文件名”&lt;/li&gt;
&lt;li&gt;发布 &lt;strong&gt;hexo p&lt;/strong&gt; 或者完整写法 &lt;strong&gt;hexo publish&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;生成静态页面，也就是普普通通的网页，用于浏览的 &lt;strong&gt;hexo g&lt;/strong&gt; 或者完整写法 &lt;strong&gt;hexo generate&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;启动本地服务器，用于预览生成的静态文件 &lt;strong&gt;hexo s&lt;/strong&gt; 或者完整写法 &lt;strong&gt;hexo server&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;部署到服务器（一般我用来把生成的静态文件部署到github）&lt;strong&gt;hexo d&lt;/strong&gt; 或者完整写法 &lt;strong&gt;hexo deploy&lt;/strong&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://www.cyixlq.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://www.cyixlq.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>php出现Noinput file specified问题解决</title>
    <link href="https://www.cyixlq.top/2018/03/14/php%E5%87%BA%E7%8E%B0Noinput%20file%20specified%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://www.cyixlq.top/2018/03/14/php%E5%87%BA%E7%8E%B0Noinput%20file%20specified%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</id>
    <published>2018-03-14T08:56:29.000Z</published>
    <updated>2021-01-15T08:30:39.729Z</updated>
    
    <content type="html"><![CDATA[<p>学PHP学着学着又出问题了，这不，又过来记录记录。<br>这次出现的问题叫做php出现Noinput file specified，大概问题我觉得是因为文件找不到。<br>出现的起因是这样的，我做了一个后台首页判断，看看你是否登录，如果没有登录的话就要跳转到登录页面，于是它的跳转地址是这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.cy.com&#x2F;index&#x2F;user&#x2F;login.html</span><br></pre></td></tr></table></figure><span id="more"></span><p>于是乎，页面就直接出现Noinput file specified这一串字符串，我看了一眼地址，原因很简单，我没有index.php在里面，如果输入下面的地址访问就是没问题的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.cy.com&#x2F;index.php&#x2F;index&#x2F;user&#x2F;login.html</span><br></pre></td></tr></table></figure><p>可是总不能在用户未登录的时候跳转到登录页面又要用户自己输入index.php吧，况且用户还不一定知道要这么改，于是一番搜索，找到解决办法。我用的服务器是Apache的，解决办法就是打开ThinkPHP框架中的public目录（我用的是ThinkPHP框架），里面有个文件是 <strong>.htaccess</strong> ，我们把它打开，它现在的内容是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  Options +FollowSymlinks -Multiviews</span><br><span class="line">  RewriteEngine On</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteRule ^(.*)$ index.php&#x2F;$1 [QSA,PT,L]</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure><p>打开之后我们要做的很简单，看到那个index.php这串字符没？我们在index.php后面加上一个 <strong>?</strong> 就OK了，改完之后的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  Options +FollowSymlinks -Multiviews</span><br><span class="line">  RewriteEngine On</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteRule ^(.*)$ index.php?&#x2F;$1 [QSA,PT,L]</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure><p>接着我重新访问一下我的首页，正常跳转到登录界面了，激动！！！又增加了点用户体验！！！</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>上面的办法只对Apache服务器有效，其他修改办法参照下文：  </p><h3 id="一-IIS-Noinput-file-specified"><a href="#一-IIS-Noinput-file-specified" class="headerlink" title="(一)IIS Noinput file specified"></a>(一)IIS Noinput file specified</h3><p><strong>方法一：</strong> 改PHP.ini中的doc_root行，打开ini文件注释掉此行，然后重启IIS<br><strong>方法二：</strong> 请修改php.ini，找到 <strong>; cgi.force_redirect = 1</strong> 去掉前面分号，把后面的1改为0即<br><strong>cgi.force_redirect = 0</strong></p><h3 id="二-nginx配置遭遇No-inputfile-specified"><a href="#二-nginx配置遭遇No-inputfile-specified" class="headerlink" title="(二)nginx配置遭遇No inputfile specified"></a>(二)nginx配置遭遇No inputfile specified</h3><p><strong>方法一：</strong> php.ini(/etc/php5/cgi/php.ini)的配置中这两项<br><strong>cgi.fix_pathinfo=1</strong> (这个是自己添加的)<br><strong>doc_root=</strong><br><strong>方法二：</strong> nginx配置文件/etc/nginx/sites-available/default中注意以下部分  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ~ .php$ &#123;</span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME &#x2F;var&#x2F;www&#x2F;nginx-default$fastcgi_script_name;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的各项参数请按照你的项目实际情况配置</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学PHP学着学着又出问题了，这不，又过来记录记录。&lt;br&gt;这次出现的问题叫做php出现Noinput file specified，大概问题我觉得是因为文件找不到。&lt;br&gt;出现的起因是这样的，我做了一个后台首页判断，看看你是否登录，如果没有登录的话就要跳转到登录页面，于是它的跳转地址是这个：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http:&amp;#x2F;&amp;#x2F;www.cy.com&amp;#x2F;index&amp;#x2F;user&amp;#x2F;login.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://www.cyixlq.top/categories/PHP/"/>
    
    
    <category term="问题解决记录" scheme="https://www.cyixlq.top/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>安卓自定义优惠券View</title>
    <link href="https://www.cyixlq.top/2018/03/14/%E5%AE%89%E5%8D%93%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BC%98%E6%83%A0%E5%88%B8View/"/>
    <id>https://www.cyixlq.top/2018/03/14/%E5%AE%89%E5%8D%93%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BC%98%E6%83%A0%E5%88%B8View/</id>
    <published>2018-03-14T08:56:29.000Z</published>
    <updated>2021-04-12T02:54:17.634Z</updated>
    
    <content type="html"><![CDATA[<h3 id="欢迎来我的个人博客查看更多文章-Cy的个人博客"><a href="#欢迎来我的个人博客查看更多文章-Cy的个人博客" class="headerlink" title="欢迎来我的个人博客查看更多文章: Cy的个人博客"></a>欢迎来我的个人博客查看更多文章: <a href="https://cyixlq.top/">Cy的个人博客</a></h3><p>不久之前写过一篇基础的自定义View的博文，今天就来实践一下自定义View，参考了网上一个自定义View控件的博文完成的（毕竟还是小白）。以下是我完成的一些步骤：  </p><ol><li><p>首先肯定需要编写一个类，让它继承自View（感觉我这个简单的自定义view继承RelativeLayout就够了），然后重写构造方法咯，这个简单，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class QuanView extends RelativeLayout&#123;</span><br><span class="line"></span><br><span class="line">    public QuanView(Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public QuanView(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span></li><li><p>然后就是初始化画笔，然后设定一些属性咯，所以现在的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class QuanView extends RelativeLayout&#123;</span><br><span class="line"></span><br><span class="line">    private Paint mPaint;</span><br><span class="line"></span><br><span class="line">    private float mGap&#x3D;20;    &#x2F;&#x2F;圆和圆之间的间距</span><br><span class="line">    private float mRadius&#x3D;15; &#x2F;&#x2F;圆的半径</span><br><span class="line">    private float mRemain;    &#x2F;&#x2F;画完圆和圆间距后多出来的距离</span><br><span class="line">    private int mCircleNum;   &#x2F;&#x2F;圆圈的数量</span><br><span class="line"></span><br><span class="line">    public QuanView(Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">        initPaint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public QuanView(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">        initPaint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initPaint()&#123;</span><br><span class="line">        mPaint&#x3D;new Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">        mPaint.setColor(Color.WHITE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在上一篇自定义博文中我们知道onSizeChanged方法会在onDraw方法前执行，我们可以在这个方法中计算好需要绘制的圆圈的个数，所以onSizeChanged方法中代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</span><br><span class="line">    super.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">    if (mRemain &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        &#x2F;&#x2F;计算不整除的剩余部分</span><br><span class="line">        mRemain &#x3D; (int) (w - mGap) % (2 * mRadius + mGap);</span><br><span class="line">    &#125;</span><br><span class="line">    mCircleNum &#x3D; (int) ((w - mGap) &#x2F; (2 * mRadius + mGap));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接下来就是最重要的部分了，重写onDraw方法，绘制自定义View，onDraw代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">    super.onDraw(canvas);</span><br><span class="line">    for (int i &#x3D; 0; i &lt; mCircleNum; i++) &#123;</span><br><span class="line">        &#x2F;&#x2F;计算出要画的圆圈的x轴位置</span><br><span class="line">        float x &#x3D; mGap + mRadius + mRemain &#x2F; 2 + ((mGap + mRadius * 2) * i);</span><br><span class="line">        &#x2F;&#x2F;从x位置开始画上面的圆圈</span><br><span class="line">        canvas.drawCircle(x, 0, mRadius, mPaint);</span><br><span class="line">        &#x2F;&#x2F;从x位置开始画下面的圆圈</span><br><span class="line">        canvas.drawCircle(x, getHeight(), mRadius, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>至此，自定义的优惠券View已经可以使用了，让我们把它加入到布局文件中，代码如下 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;top.cyixlq.view.widght.QuanView</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;150dp&quot;</span><br><span class="line">    android:background&#x3D;&quot;@color&#x2F;colorPrimary&quot;&gt;</span><br><span class="line">&lt;&#x2F;top.cyixlq.view.widght.QuanView&gt;</span><br></pre></td></tr></table></figure></li><li><p>运行后的结果如图所示：<br><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BC%98%E6%83%A0%E5%88%B8View%E6%95%88%E6%9E%9C%E5%9B%BE.webp" alt="运行效果"></p></li><li><p>添加自定义属性，我们虽然能正常使用了，但是各个用户间需求不同我们还要能够自定义啊，这样才能用的舒心啊！首先就要在values目录下新建一个文件了，attrs.xml，然后在文件中加入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;declare-styleable name&#x3D;&quot;QuanView&quot;&gt;</span><br><span class="line">        &lt;!--圆半径大小--&gt;</span><br><span class="line">        &lt;attr name&#x3D;&quot;radius&quot; format&#x3D;&quot;dimension&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--圆与圆之间的间隔--&gt;</span><br><span class="line">        &lt;attr name&#x3D;&quot;gap&quot; format&#x3D;&quot;dimension&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;declare-styleable&gt;</span><br><span class="line">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure></li><li><p> 修改View的构造函数，读取布局文件中传来的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public QuanView(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">        initPaint();</span><br><span class="line">        TypedArray typedArray&#x3D;context.obtainStyledAttributes(attrs, R.styleable.QuanView);</span><br><span class="line">        mGap &#x3D; typedArray.getDimensionPixelOffset(R.styleable.QuanView_gap,20);&#x2F;&#x2F;最后那个参数代表默认值，如果布局文件中没有传入该参数则使用默认值</span><br><span class="line">        mRadius &#x3D; typedArray.getDimensionPixelOffset(R.styleable.QuanView_radius,15);</span><br><span class="line">        typedArray.recycle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在布局文件中加上我们的自定义的参数，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;top.cyixlq.view.widght.QuanView</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;150dp&quot;</span><br><span class="line">        app:gap&#x3D;&quot;2dp&quot;</span><br><span class="line">        app:radius&#x3D;&quot;2dp&quot;</span><br><span class="line">        android:background&#x3D;&quot;@color&#x2F;colorPrimary&quot;&gt;</span><br><span class="line">&lt;&#x2F;top.cyixlq.view.widght.QuanView&gt;</span><br></pre></td></tr></table></figure><p>（别忘了，使用了自定义的参数的话要引入一个命名空间哦，如下所示）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br></pre></td></tr></table></figure></li><li><p>如果觉得这样不够帅的话，app这个字段是可以换的，例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:cy&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br></pre></td></tr></table></figure><p>这时候在布局文件中的自定义组件的那一段代码报错了<br><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BC%98%E6%83%A0%E5%88%B8View%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%8A%A5%E9%94%99.webp" alt="命名空间报错了"><br>这时候仅仅需要将布局中自定义的代码换成如下所示就可以了。（将app换成引入时候的名称cy）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;top.cyixlq.view.widght.QuanView</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;150dp&quot;</span><br><span class="line">        cy:gap&#x3D;&quot;2dp&quot;</span><br><span class="line">        cy:radius&#x3D;&quot;2dp&quot;</span><br><span class="line">        android:background&#x3D;&quot;@color&#x2F;colorPrimary&quot;&gt;</span><br><span class="line">&lt;&#x2F;top.cyixlq.view.widght.QuanView&gt;</span><br></pre></td></tr></table></figure><p>这样是不是就具有标志性了呢？是不是更帅一点了呢？<br>最后我们再来看看修改后的效果吧！<br><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BC%98%E6%83%A0%E5%88%B8View%E6%95%88%E6%9E%9C%E5%9B%BE2.webp" alt="我们会发现锯齿变小了好多"></p></li></ol><h4 id="至此，我们一个简单的自定义View就到此为止啦-拜了个拜。。。"><a href="#至此，我们一个简单的自定义View就到此为止啦-拜了个拜。。。" class="headerlink" title="至此，我们一个简单的自定义View就到此为止啦!拜了个拜。。。"></a>至此，我们一个简单的自定义View就到此为止啦!拜了个拜。。。</h4>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;欢迎来我的个人博客查看更多文章-Cy的个人博客&quot;&gt;&lt;a href=&quot;#欢迎来我的个人博客查看更多文章-Cy的个人博客&quot; class=&quot;headerlink&quot; title=&quot;欢迎来我的个人博客查看更多文章: Cy的个人博客&quot;&gt;&lt;/a&gt;欢迎来我的个人博客查看更多文章: &lt;a href=&quot;https://cyixlq.top/&quot;&gt;Cy的个人博客&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;不久之前写过一篇基础的自定义View的博文，今天就来实践一下自定义View，参考了网上一个自定义View控件的博文完成的（毕竟还是小白）。以下是我完成的一些步骤：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先肯定需要编写一个类，让它继承自View（感觉我这个简单的自定义view继承RelativeLayout就够了），然后重写构造方法咯，这个简单，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class QuanView extends RelativeLayout&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public QuanView(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public QuanView(Context context, AttributeSet attrs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context, attrs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.cyixlq.top/categories/Android/"/>
    
    
    <category term="自定义View实战" scheme="https://www.cyixlq.top/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
</feed>
